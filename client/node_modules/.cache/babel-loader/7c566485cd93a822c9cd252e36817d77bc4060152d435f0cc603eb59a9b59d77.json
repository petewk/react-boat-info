{"ast":null,"code":"const {\n  Transform\n} = require('stream');\n\n/**\n * Decodes a Base64 data stream, coming in as a string or Buffer of UTF-8 text, into binary Buffers.\n * @extends Transform\n */\nmodule.exports = class Base64Decode extends Transform {\n  /**\n   * Create a Base64Decode\n   */\n  constructor() {\n    super({\n      decodeStrings: false\n    });\n    // Any extra chars from the last chunk\n    this.extra = '';\n  }\n\n  /**\n   * Decodes a Base64 data stream, coming in as a string or Buffer of UTF-8 text, into binary Buffers.\n   * @param {Buffer|string} chunk\n   * @param encoding\n   * @param cb\n   * @private\n   */\n  _transform(chunk, encoding, cb) {\n    // Convert chunk to a string\n    chunk = '' + chunk;\n\n    // Add previous extra and remove any newline characters\n    chunk = this.extra + chunk.replace(/(\\r\\n|\\n|\\r)/gm, '');\n\n    // 4 characters represent 3 bytes, so we can only decode in groups of 4 chars\n    const remaining = chunk.length % 4;\n\n    // Store the extra chars for later\n    this.extra = chunk.slice(chunk.length - remaining);\n    chunk = chunk.slice(0, chunk.length - remaining);\n\n    // Create the new buffer and push\n    const buf = Buffer.from(chunk, 'base64');\n    this.push(buf);\n    cb();\n  }\n\n  /**\n   * Emits 1, 2, or 3 extra characters of base64 data.\n   * @param cb\n   * @private\n   */\n  _flush(cb) {\n    if (this.extra.length) {\n      this.push(Buffer.from(this.extra, 'base64'));\n    }\n    cb();\n  }\n};","map":{"version":3,"names":["Transform","require","module","exports","Base64Decode","constructor","decodeStrings","extra","_transform","chunk","encoding","cb","replace","remaining","length","slice","buf","Buffer","from","push","_flush"],"sources":["C:/Users/petew/OneDrive/Desktop/Web Dev Reboot/react-boat-info/client/node_modules/base64-stream/lib/decode.js"],"sourcesContent":["const { Transform } = require('stream');\n\n/**\n * Decodes a Base64 data stream, coming in as a string or Buffer of UTF-8 text, into binary Buffers.\n * @extends Transform\n */\nmodule.exports = class Base64Decode extends Transform {\n    /**\n     * Create a Base64Decode\n     */\n    constructor() {\n        super({ decodeStrings: false });\n        // Any extra chars from the last chunk\n        this.extra = '';\n    }\n\n    /**\n     * Decodes a Base64 data stream, coming in as a string or Buffer of UTF-8 text, into binary Buffers.\n     * @param {Buffer|string} chunk\n     * @param encoding\n     * @param cb\n     * @private\n     */\n    _transform(chunk, encoding, cb) {\n        // Convert chunk to a string\n        chunk = '' + chunk;\n\n        // Add previous extra and remove any newline characters\n        chunk = this.extra + chunk.replace(/(\\r\\n|\\n|\\r)/gm, '');\n\n        // 4 characters represent 3 bytes, so we can only decode in groups of 4 chars\n        const remaining = chunk.length % 4;\n\n        // Store the extra chars for later\n        this.extra = chunk.slice(chunk.length - remaining);\n        chunk = chunk.slice(0, chunk.length - remaining);\n\n        // Create the new buffer and push\n        const buf = Buffer.from(chunk, 'base64');\n        this.push(buf);\n        cb();\n    }\n\n    /**\n     * Emits 1, 2, or 3 extra characters of base64 data.\n     * @param cb\n     * @private\n     */\n    _flush(cb) {\n        if (this.extra.length) {\n            this.push(Buffer.from(this.extra, 'base64'));\n        }\n\n        cb();\n    }\n};\n"],"mappings":"AAAA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEvC;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,MAAMC,YAAY,SAASJ,SAAS,CAAC;EAClD;AACJ;AACA;EACIK,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MAAEC,aAAa,EAAE;IAAM,CAAC,CAAC;IAC/B;IACA,IAAI,CAACC,KAAK,GAAG,EAAE;EACnB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,EAAE,EAAE;IAC5B;IACAF,KAAK,GAAG,EAAE,GAAGA,KAAK;;IAElB;IACAA,KAAK,GAAG,IAAI,CAACF,KAAK,GAAGE,KAAK,CAACG,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC;;IAExD;IACA,MAAMC,SAAS,GAAGJ,KAAK,CAACK,MAAM,GAAG,CAAC;;IAElC;IACA,IAAI,CAACP,KAAK,GAAGE,KAAK,CAACM,KAAK,CAACN,KAAK,CAACK,MAAM,GAAGD,SAAS,CAAC;IAClDJ,KAAK,GAAGA,KAAK,CAACM,KAAK,CAAC,CAAC,EAAEN,KAAK,CAACK,MAAM,GAAGD,SAAS,CAAC;;IAEhD;IACA,MAAMG,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACT,KAAK,EAAE,QAAQ,CAAC;IACxC,IAAI,CAACU,IAAI,CAACH,GAAG,CAAC;IACdL,EAAE,CAAC,CAAC;EACR;;EAEA;AACJ;AACA;AACA;AACA;EACIS,MAAMA,CAACT,EAAE,EAAE;IACP,IAAI,IAAI,CAACJ,KAAK,CAACO,MAAM,EAAE;MACnB,IAAI,CAACK,IAAI,CAACF,MAAM,CAACC,IAAI,CAAC,IAAI,CAACX,KAAK,EAAE,QAAQ,CAAC,CAAC;IAChD;IAEAI,EAAE,CAAC,CAAC;EACR;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}