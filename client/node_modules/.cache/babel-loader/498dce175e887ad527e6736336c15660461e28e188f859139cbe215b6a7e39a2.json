{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nconst inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/;\nconst pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/g;\nconst Strike = Mark.create({\n  name: 'strike',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 's'\n    }, {\n      tag: 'del'\n    }, {\n      tag: 'strike'\n    }, {\n      style: 'text-decoration',\n      consuming: false,\n      getAttrs: style => style.includes('line-through') ? {} : false\n    }];\n  },\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setStrike: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.setMark(this.name);\n      },\n      toggleStrike: () => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n        return commands.toggleMark(this.name);\n      },\n      unsetStrike: () => _ref4 => {\n        let {\n          commands\n        } = _ref4;\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-x': () => this.editor.commands.toggleStrike()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Strike, Strike as default, inputRegex, pasteRegex };","map":{"version":3,"mappings":";AA8BO,MAAMA,UAAU,GAAG;AACnB,MAAMC,UAAU,GAAG;AAEb,YAAM,GAAGC,IAAI,CAACC,MAAM,CAAgB;EAC/CC,IAAI,EAAE,QAAQ;EAEdC,UAAU;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,SAAS;IACP,OAAO,CACL;MACEC,GAAG,EAAE;IACN,GACD;MACEA,GAAG,EAAE;IACN,GACD;MACEA,GAAG,EAAE;IACN,GACD;MACEC,KAAK,EAAE,iBAAiB;MACxBC,SAAS,EAAE,KAAK;MAChBC,QAAQ,EAAEF,KAAK,IAAMA,KAAgB,CAACG,QAAQ,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG;IACvE,EACF;GACF;EAEDC,UAAU,OAAmB;IAAA,IAAlB;MAAEP;IAAc,CAAE;IAC3B,OAAO,CAAC,GAAG,EAAEQ,eAAe,CAAC,IAAI,CAACC,OAAO,CAACT,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GAC9E;EAEDU,WAAW;IACT,OAAO;MACLC,SAAS,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEC;QAAQ,CAAE;QAC5B,OAAOA,QAAQ,CAACC,OAAO,CAAC,IAAI,CAACf,IAAI,CAAC;OACnC;MACDgB,YAAY,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEF;QAAQ,CAAE;QAC/B,OAAOA,QAAQ,CAACG,UAAU,CAAC,IAAI,CAACjB,IAAI,CAAC;OACtC;MACDkB,WAAW,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEJ;QAAQ,CAAE;QAC9B,OAAOA,QAAQ,CAACK,SAAS,CAAC,IAAI,CAACnB,IAAI,CAAC;;KAEvC;GACF;EAEDoB,oBAAoB;IAClB,OAAO;MACL,aAAa,EAAE,MAAM,IAAI,CAACC,MAAM,CAACP,QAAQ,CAACE,YAAY;KACvD;GACF;EAEDM,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAE5B,UAAU;MAChB6B,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;GACF;EAEDC,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZH,IAAI,EAAE3B,UAAU;MAChB4B,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;;AAEJ","names":["inputRegex","pasteRegex","Mark","create","name","addOptions","HTMLAttributes","parseHTML","tag","style","consuming","getAttrs","includes","renderHTML","mergeAttributes","options","addCommands","setStrike","commands","setMark","toggleStrike","toggleMark","unsetStrike","unsetMark","addKeyboardShortcuts","editor","addInputRules","markInputRule","find","type","addPasteRules","markPasteRule"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-strike\\src\\strike.ts"],"sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface StrikeOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    strike: {\n      /**\n       * Set a strike mark\n       */\n      setStrike: () => ReturnType,\n      /**\n       * Toggle a strike mark\n       */\n      toggleStrike: () => ReturnType,\n      /**\n       * Unset a strike mark\n       */\n      unsetStrike: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/\nexport const pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/g\n\nexport const Strike = Mark.create<StrikeOptions>({\n  name: 'strike',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 's',\n      },\n      {\n        tag: 'del',\n      },\n      {\n        tag: 'strike',\n      },\n      {\n        style: 'text-decoration',\n        consuming: false,\n        getAttrs: style => ((style as string).includes('line-through') ? {} : false),\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setStrike: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleStrike: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetStrike: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-x': () => this.editor.commands.toggleStrike(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}