{"ast":null,"code":"import { Node, mergeAttributes } from '@tiptap/core';\nvar HardBreak = Node.create({\n  name: 'hardBreak',\n  addOptions: function addOptions() {\n    return {\n      keepMarks: true,\n      HTMLAttributes: {}\n    };\n  },\n  inline: true,\n  group: 'inline',\n  selectable: false,\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'br'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n  renderText: function renderText() {\n    return '\\n';\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setHardBreak: function setHardBreak() {\n        return function (_ref2) {\n          var commands = _ref2.commands,\n            chain = _ref2.chain,\n            state = _ref2.state,\n            editor = _ref2.editor;\n          return commands.first([function () {\n            return commands.exitCode();\n          }, function () {\n            return commands.command(function () {\n              var selection = state.selection,\n                storedMarks = state.storedMarks;\n              if (selection.$from.parent.type.spec.isolating) {\n                return false;\n              }\n              var keepMarks = _this.options.keepMarks;\n              var splittableMarks = editor.extensionManager.splittableMarks;\n              var marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n              return chain().insertContent({\n                type: _this.name\n              }).command(function (_ref3) {\n                var tr = _ref3.tr,\n                  dispatch = _ref3.dispatch;\n                if (dispatch && marks && keepMarks) {\n                  var filteredMarks = marks.filter(function (mark) {\n                    return splittableMarks.includes(mark.type.name);\n                  });\n                  tr.ensureMarks(filteredMarks);\n                }\n                return true;\n              }).run();\n            });\n          }]);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Enter': function ModEnter() {\n        return _this2.editor.commands.setHardBreak();\n      },\n      'Shift-Enter': function ShiftEnter() {\n        return _this2.editor.commands.setHardBreak();\n      }\n    };\n  }\n});\nexport { HardBreak, HardBreak as default };","map":{"version":3,"mappings":";AAkBa,aAAS,GAAGA,IAAI,CAACC,MAAM,CAAmB;EACrDC,IAAI,EAAE,WAAW;EAEjBC,UAAU;IACR,OAAO;MACLC,SAAS,EAAE,IAAI;MACfC,cAAc,EAAE;KACjB;GACF;EAEDC,MAAM,EAAE,IAAI;EAEZC,KAAK,EAAE,QAAQ;EAEfC,UAAU,EAAE,KAAK;EAEjBC,SAAS;IACP,OAAO,CACL;MAAEC,GAAG,EAAE;IAAI,CAAE,CACd;GACF;EAEDC,UAAU,4BAAmB;IAAA,IAAhBN,cAAc,QAAdA,cAAc;IACzB,OAAO,CAAC,IAAI,EAAEO,eAAe,CAAC,IAAI,CAACC,OAAO,CAACR,cAAc,EAAEA,cAAc,CAAC,CAAC;GAC5E;EAEDS,UAAU;IACR,OAAO,IAAI;GACZ;EAEDC,WAAW;IAAA;IACT,OAAO;MACLC,YAAY,EAAE;QAAA,OAAM,iBAKf;UAAA,IAJHC,QAAQ,SAARA,QAAQ;YACRC,KAAK,SAALA,KAAK;YACLC,KAAK,SAALA,KAAK;YACLC,MAAM,SAANA,MAAM;UAEN,OAAOH,QAAQ,CAACI,KAAK,CAAC,CACpB;YAAA,OAAMJ,QAAQ,CAACK,QAAQ,EAAE;UAAA,GACzB;YAAA,OAAML,QAAQ,CAACM,OAAO,CAAC,YAAK;cAC1B,IAAQC,SAAS,GAAkBL,KAAK,CAAhCK,SAAS;gBAAEC,WAAW,GAAKN,KAAK,CAArBM,WAAW;cAE9B,IAAID,SAAS,CAACE,KAAK,CAACC,MAAM,CAACC,IAAI,CAACC,IAAI,CAACC,SAAS,EAAE;gBAC9C,OAAO,KAAK;cACb;cAED,IAAQ1B,SAAS,GAAK,KAAI,CAACS,OAAO,CAA1BT,SAAS;cACjB,IAAQ2B,eAAe,GAAKX,MAAM,CAACY,gBAAgB,CAA3CD,eAAe;cACvB,IAAME,KAAK,GAAGR,WAAW,IACnBD,SAAS,CAACU,GAAG,CAACC,YAAY,IAAIX,SAAS,CAACE,KAAK,CAACO,KAAK,EAAG;cAE5D,OAAOf,KAAK,EAAE,CACXkB,aAAa,CAAC;gBAAER,IAAI,EAAE,KAAI,CAAC1B;cAAI,CAAE,CAAC,CAClCqB,OAAO,CAAC,iBAAqB;gBAAA,IAAlBc,EAAE,SAAFA,EAAE;kBAAEC,QAAQ,SAARA,QAAQ;gBACtB,IAAIA,QAAQ,IAAIL,KAAK,IAAI7B,SAAS,EAAE;kBAClC,IAAMmC,aAAa,GAAGN,KAAK,CACxBO,MAAM,CAAC,cAAI;oBAAA,OAAIT,eAAe,CAACU,QAAQ,CAACC,IAAI,CAACd,IAAI,CAAC1B,IAAI,CAAC;kBAAA,EAAC;kBAE3DmC,EAAE,CAACM,WAAW,CAACJ,aAAa,CAAC;gBAC9B;gBAED,OAAO,IAAI;cACb,CAAC,CAAC,CACDK,GAAG,EAAE;YACV,CAAC,CAAC;UAAA,EACH,CAAC;SACH;MAAA;KACF;GACF;EAEDC,oBAAoB;IAAA;IAClB,OAAO;MACL,WAAW,EAAE;QAAA,OAAM,MAAI,CAACzB,MAAM,CAACH,QAAQ,CAACD,YAAY,EAAE;MAAA;MACtD,aAAa,EAAE;QAAA,OAAM,MAAI,CAACI,MAAM,CAACH,QAAQ,CAACD,YAAY,EAAE;MAAA;KACzD;;AAEJ","names":["Node","create","name","addOptions","keepMarks","HTMLAttributes","inline","group","selectable","parseHTML","tag","renderHTML","mergeAttributes","options","renderText","addCommands","setHardBreak","commands","chain","state","editor","first","exitCode","command","selection","storedMarks","$from","parent","type","spec","isolating","splittableMarks","extensionManager","marks","$to","parentOffset","insertContent","tr","dispatch","filteredMarks","filter","includes","mark","ensureMarks","run","addKeyboardShortcuts"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-hard-break\\src\\hard-break.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface HardBreakOptions {\n  keepMarks: boolean,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    hardBreak: {\n      /**\n       * Add a hard break\n       */\n      setHardBreak: () => ReturnType,\n    }\n  }\n}\n\nexport const HardBreak = Node.create<HardBreakOptions>({\n  name: 'hardBreak',\n\n  addOptions() {\n    return {\n      keepMarks: true,\n      HTMLAttributes: {},\n    }\n  },\n\n  inline: true,\n\n  group: 'inline',\n\n  selectable: false,\n\n  parseHTML() {\n    return [\n      { tag: 'br' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  renderText() {\n    return '\\n'\n  },\n\n  addCommands() {\n    return {\n      setHardBreak: () => ({\n        commands,\n        chain,\n        state,\n        editor,\n      }) => {\n        return commands.first([\n          () => commands.exitCode(),\n          () => commands.command(() => {\n            const { selection, storedMarks } = state\n\n            if (selection.$from.parent.type.spec.isolating) {\n              return false\n            }\n\n            const { keepMarks } = this.options\n            const { splittableMarks } = editor.extensionManager\n            const marks = storedMarks\n              || (selection.$to.parentOffset && selection.$from.marks())\n\n            return chain()\n              .insertContent({ type: this.name })\n              .command(({ tr, dispatch }) => {\n                if (dispatch && marks && keepMarks) {\n                  const filteredMarks = marks\n                    .filter(mark => splittableMarks.includes(mark.type.name))\n\n                  tr.ensureMarks(filteredMarks)\n                }\n\n                return true\n              })\n              .run()\n          }),\n        ])\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Enter': () => this.editor.commands.setHardBreak(),\n      'Shift-Enter': () => this.editor.commands.setHardBreak(),\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}