{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { $wrapNodeInElement, mergeRegister } from \"@lexical/utils\";\nimport { $createParagraphNode, $insertNodes, $isRootOrShadowRoot, COMMAND_PRIORITY_EDITOR, createCommand, LexicalCommand } from \"lexical\";\nimport { useEffect } from \"react\";\nimport { $createImageNode, ImageNode, ImagePayload } from \"../nodes/ImageNode\";\nexport const INSERT_IMAGE_COMMAND = createCommand(\"INSERT_IMAGE_COMMAND\");\nexport default function ImagesPlugin(_ref) {\n  _s();\n  let {\n    captionsEnabled\n  } = _ref;\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    if (!editor.hasNodes([ImageNode])) {\n      throw new Error(\"ImagesPlugin: ImageNode not registered on editor\");\n    }\n    return mergeRegister(editor.registerCommand < InsertImagePayload > (INSERT_IMAGE_COMMAND, payload => {\n      const imageNode = $createImageNode(payload);\n      $insertNodes([imageNode]);\n      if ($isRootOrShadowRoot(imageNode.getParentOrThrow())) {\n        $wrapNodeInElement(imageNode, $createParagraphNode).selectEnd();\n      }\n      return true;\n    }, COMMAND_PRIORITY_EDITOR));\n  }, [captionsEnabled, editor]);\n  return null;\n}\n_s(ImagesPlugin, \"mCqe7sh4aC9mLBXPHfG3d/PNTaQ=\", false, function () {\n  return [useLexicalComposerContext];\n});\n_c = ImagesPlugin;\nvar _c;\n$RefreshReg$(_c, \"ImagesPlugin\");","map":{"version":3,"names":["useLexicalComposerContext","$wrapNodeInElement","mergeRegister","$createParagraphNode","$insertNodes","$isRootOrShadowRoot","COMMAND_PRIORITY_EDITOR","createCommand","LexicalCommand","useEffect","$createImageNode","ImageNode","ImagePayload","INSERT_IMAGE_COMMAND","ImagesPlugin","captionsEnabled","editor","hasNodes","Error","registerCommand","InsertImagePayload","payload","imageNode","getParentOrThrow","selectEnd"],"sources":["C:/Users/petew/OneDrive/Desktop/Web Dev Reboot/react-boat-info/client/src/components/Lexical/ImagePlugin.js"],"sourcesContent":["import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\r\nimport { $wrapNodeInElement, mergeRegister } from \"@lexical/utils\";\r\nimport {\r\n  $createParagraphNode,\r\n  $insertNodes,\r\n  $isRootOrShadowRoot,\r\n  COMMAND_PRIORITY_EDITOR,\r\n  createCommand,\r\n  LexicalCommand\r\n} from \"lexical\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport { $createImageNode, ImageNode, ImagePayload } from \"../nodes/ImageNode\";\r\n\r\nexport type InsertImagePayload = Readonly<ImagePayload>;\r\n\r\nexport const INSERT_IMAGE_COMMAND: LexicalCommand<InsertImagePayload> = createCommand(\r\n  \"INSERT_IMAGE_COMMAND\"\r\n);\r\n\r\nexport default function ImagesPlugin({\r\n  captionsEnabled\r\n}: {\r\n  captionsEnabled?: boolean;\r\n}): JSX.Element | null {\r\n  const [editor] = useLexicalComposerContext();\r\n\r\n  useEffect(() => {\r\n    if (!editor.hasNodes([ImageNode])) {\r\n      throw new Error(\"ImagesPlugin: ImageNode not registered on editor\");\r\n    }\r\n\r\n    return mergeRegister(\r\n      editor.registerCommand<InsertImagePayload>(\r\n        INSERT_IMAGE_COMMAND,\r\n        (payload) => {\r\n          const imageNode = $createImageNode(payload);\r\n          $insertNodes([imageNode]);\r\n          if ($isRootOrShadowRoot(imageNode.getParentOrThrow())) {\r\n            $wrapNodeInElement(imageNode, $createParagraphNode).selectEnd();\r\n          }\r\n\r\n          return true;\r\n        },\r\n        COMMAND_PRIORITY_EDITOR\r\n      )\r\n    );\r\n  }, [captionsEnabled, editor]);\r\n\r\n  return null;\r\n}\r\n"],"mappings":";AAAA,SAASA,yBAAyB,QAAQ,uCAAuC;AACjF,SAASC,kBAAkB,EAAEC,aAAa,QAAQ,gBAAgB;AAClE,SACEC,oBAAoB,EACpBC,YAAY,EACZC,mBAAmB,EACnBC,uBAAuB,EACvBC,aAAa,EACbC,cAAc,QACT,SAAS;AAChB,SAASC,SAAS,QAAQ,OAAO;AAEjC,SAASC,gBAAgB,EAAEC,SAAS,EAAEC,YAAY,QAAQ,oBAAoB;AAI9E,OAAO,MAAMC,oBAAwD,GAAGN,aAAa,CACnF,sBAAsB,CACvB;AAED,eAAe,SAASO,YAAY,OAIb;EAAA;EAAA,IAJc;IACnCC;EAGF,CAAC;EACC,MAAM,CAACC,MAAM,CAAC,GAAGhB,yBAAyB,EAAE;EAE5CS,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,MAAM,CAACC,QAAQ,CAAC,CAACN,SAAS,CAAC,CAAC,EAAE;MACjC,MAAM,IAAIO,KAAK,CAAC,kDAAkD,CAAC;IACrE;IAEA,OAAOhB,aAAa,CAClBc,MAAM,CAACG,eAAe,GAACC,kBAAkB,IACvCP,oBAAoB,EACnBQ,OAAO,IAAK;MACX,MAAMC,SAAS,GAAGZ,gBAAgB,CAACW,OAAO,CAAC;MAC3CjB,YAAY,CAAC,CAACkB,SAAS,CAAC,CAAC;MACzB,IAAIjB,mBAAmB,CAACiB,SAAS,CAACC,gBAAgB,EAAE,CAAC,EAAE;QACrDtB,kBAAkB,CAACqB,SAAS,EAAEnB,oBAAoB,CAAC,CAACqB,SAAS,EAAE;MACjE;MAEA,OAAO,IAAI;IACb,CAAC,EACDlB,uBAAuB,CACxB,CACF;EACH,CAAC,EAAE,CAACS,eAAe,EAAEC,MAAM,CAAC,CAAC;EAE7B,OAAO,IAAI;AACb;AAAC,GA9BuBF,YAAY;EAAA,QAKjBd,yBAAyB;AAAA;AAAA,KALpBc,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}