{"ast":null,"code":"import { Node, mergeAttributes, nodeInputRule } from '@tiptap/core';\nimport { TextSelection } from '@tiptap/pm/state';\nvar HorizontalRule = Node.create({\n  name: 'horizontalRule',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  group: 'block',\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'hr'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['hr', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setHorizontalRule: function setHorizontalRule() {\n        return function (_ref2) {\n          var chain = _ref2.chain;\n          return chain().insertContent({\n            type: _this.name\n          })\n          // set cursor after horizontal rule\n          .command(function (_ref3) {\n            var tr = _ref3.tr,\n              dispatch = _ref3.dispatch;\n            var _a;\n            if (dispatch) {\n              var $to = tr.selection.$to;\n              var posAfter = $to.end();\n              if ($to.nodeAfter) {\n                tr.setSelection(TextSelection.create(tr.doc, $to.pos));\n              } else {\n                // add node after horizontal rule if it’s the end of the document\n                var node = (_a = $to.parent.type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.create();\n                if (node) {\n                  tr.insert(posAfter, node);\n                  tr.setSelection(TextSelection.create(tr.doc, posAfter));\n                }\n              }\n              tr.scrollIntoView();\n            }\n            return true;\n          }).run();\n        };\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [nodeInputRule({\n      find: /^(?:---|—-|___\\s|\\*\\*\\*\\s)$/,\n      type: this.type\n    })];\n  }\n});\nexport { HorizontalRule, HorizontalRule as default };","map":{"version":3,"mappings":";;AAkBa,kBAAc,GAAGA,IAAI,CAACC,MAAM,CAAwB;EAC/DC,IAAI,EAAE,gBAAgB;EAEtBC,UAAU;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,KAAK,EAAE,OAAO;EAEdC,SAAS;IACP,OAAO,CAAC;MAAEC,GAAG,EAAE;IAAI,CAAE,CAAC;GACvB;EAEDC,UAAU,4BAAmB;IAAA,IAAhBJ,cAAc,QAAdA,cAAc;IACzB,OAAO,CAAC,IAAI,EAAEK,eAAe,CAAC,IAAI,CAACC,OAAO,CAACN,cAAc,EAAEA,cAAc,CAAC,CAAC;GAC5E;EAEDO,WAAW;IAAA;IACT,OAAO;MACLC,iBAAiB,EACf;QAAA,OAAM,iBAAc;UAAA,IAAXC,KAAK,SAALA,KAAK;UACZ,OACEA,KAAK,EAAE,CACJC,aAAa,CAAC;YAAEC,IAAI,EAAE,KAAI,CAACb;UAAI,CAAE;;WAEjCc,OAAO,CAAC,iBAAqB;YAAA,IAAlBC,EAAE,SAAFA,EAAE;cAAEC,QAAQ,SAARA,QAAQ;;YACtB,IAAIA,QAAQ,EAAE;cACZ,IAAQC,GAAG,GAAKF,EAAE,CAACG,SAAS,CAApBD,GAAG;cACX,IAAME,QAAQ,GAAGF,GAAG,CAACG,GAAG,EAAE;cAE1B,IAAIH,GAAG,CAACI,SAAS,EAAE;gBACjBN,EAAE,CAACO,YAAY,CAACC,aAAa,CAACxB,MAAM,CAACgB,EAAE,CAACS,GAAG,EAAEP,GAAG,CAACQ,GAAG,CAAC,CAAC;cACvD,OAAM;;gBAEL,IAAMC,IAAI,GAAG,SAAG,CAACC,MAAM,CAACd,IAAI,CAACe,YAAY,CAACC,WAAW,MAAE,0CAAM,EAAE;gBAE/D,IAAIH,IAAI,EAAE;kBACRX,EAAE,CAACe,MAAM,CAACX,QAAQ,EAAEO,IAAI,CAAC;kBACzBX,EAAE,CAACO,YAAY,CAACC,aAAa,CAACxB,MAAM,CAACgB,EAAE,CAACS,GAAG,EAAEL,QAAQ,CAAC,CAAC;gBACxD;cACF;cAEDJ,EAAE,CAACgB,cAAc,EAAE;YACpB;YAED,OAAO,IAAI;UACb,CAAC,CAAC,CACDC,GAAG,EAAE;SAEX;MAAA;KACJ;GACF;EAEDC,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAE,6BAA6B;MACnCtB,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;;AAEJ","names":["Node","create","name","addOptions","HTMLAttributes","group","parseHTML","tag","renderHTML","mergeAttributes","options","addCommands","setHorizontalRule","chain","insertContent","type","command","tr","dispatch","$to","selection","posAfter","end","nodeAfter","setSelection","TextSelection","doc","pos","node","parent","contentMatch","defaultType","insert","scrollIntoView","run","addInputRules","nodeInputRule","find"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-horizontal-rule\\src\\horizontal-rule.ts"],"sourcesContent":["import { mergeAttributes, Node, nodeInputRule } from '@tiptap/core'\nimport { TextSelection } from '@tiptap/pm/state'\n\nexport interface HorizontalRuleOptions {\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    horizontalRule: {\n      /**\n       * Add a horizontal rule\n       */\n      setHorizontalRule: () => ReturnType\n    }\n  }\n}\n\nexport const HorizontalRule = Node.create<HorizontalRuleOptions>({\n  name: 'horizontalRule',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block',\n\n  parseHTML() {\n    return [{ tag: 'hr' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['hr', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  addCommands() {\n    return {\n      setHorizontalRule:\n        () => ({ chain }) => {\n          return (\n            chain()\n              .insertContent({ type: this.name })\n              // set cursor after horizontal rule\n              .command(({ tr, dispatch }) => {\n                if (dispatch) {\n                  const { $to } = tr.selection\n                  const posAfter = $to.end()\n\n                  if ($to.nodeAfter) {\n                    tr.setSelection(TextSelection.create(tr.doc, $to.pos))\n                  } else {\n                    // add node after horizontal rule if it’s the end of the document\n                    const node = $to.parent.type.contentMatch.defaultType?.create()\n\n                    if (node) {\n                      tr.insert(posAfter, node)\n                      tr.setSelection(TextSelection.create(tr.doc, posAfter))\n                    }\n                  }\n\n                  tr.scrollIntoView()\n                }\n\n                return true\n              })\n              .run()\n          )\n        },\n    }\n  },\n\n  addInputRules() {\n    return [\n      nodeInputRule({\n        find: /^(?:---|—-|___\\s|\\*\\*\\*\\s)$/,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}