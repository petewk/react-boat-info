{"ast":null,"code":"import { Node, mergeAttributes, Mark, getMarkAttributes, wrappingInputRule } from '@tiptap/core';\nconst ListItem = Node.create({\n  name: 'listItem',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  content: 'paragraph block*',\n  defining: true,\n  parseHTML() {\n    return [{\n      tag: 'li'\n    }];\n  },\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name)\n    };\n  }\n});\nconst TextStyle = Mark.create({\n  name: 'textStyle',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'span',\n      getAttrs: element => {\n        const hasStyles = element.hasAttribute('style');\n        if (!hasStyles) {\n          return false;\n        }\n        return {};\n      }\n    }];\n  },\n  renderHTML(_ref2) {\n    let {\n      HTMLAttributes\n    } = _ref2;\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => _ref3 => {\n        let {\n          state,\n          commands\n        } = _ref3;\n        const attributes = getMarkAttributes(state, this.type);\n        const hasStyles = Object.entries(attributes).some(_ref4 => {\n          let [, value] = _ref4;\n          return !!value;\n        });\n        if (hasStyles) {\n          return true;\n        }\n        return commands.unsetMark(this.name);\n      }\n    };\n  }\n});\nconst inputRegex = /^(\\d+)\\.\\s$/;\nconst OrderedList = Node.create({\n  name: 'orderedList',\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false\n    };\n  },\n  group: 'block list',\n  content() {\n    return `${this.options.itemTypeName}+`;\n  },\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start') ? parseInt(element.getAttribute('start') || '', 10) : 1;\n        }\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'ol'\n    }];\n  },\n  renderHTML(_ref5) {\n    let {\n      HTMLAttributes\n    } = _ref5;\n    const {\n      start,\n      ...attributesWithoutStart\n    } = HTMLAttributes;\n    return start === 1 ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0] : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      toggleOrderedList: () => _ref6 => {\n        let {\n          commands,\n          chain\n        } = _ref6;\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run();\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList()\n    };\n  },\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type\n    });\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: () => {\n          return this.editor.getAttributes(TextStyle.name);\n        },\n        editor: this.editor\n      });\n    }\n    return [inputRule];\n  }\n});\nexport { OrderedList, OrderedList as default, inputRegex };","map":{"version":3,"mappings":"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","names":["ListItem","Node","create","name","addOptions","HTMLAttributes","content","defining","parseHTML","tag","renderHTML","mergeAttributes","options","addKeyboardShortcuts","Enter","editor","commands","splitListItem","Tab","sinkListItem","liftListItem","TextStyle","Mark","getAttrs","element","hasStyles","hasAttribute","addCommands","removeEmptyTextStyle","state","attributes","getMarkAttributes","type","Object","entries","some","value","unsetMark","inputRegex","itemTypeName","keepMarks","keepAttributes","group","addAttributes","start","default","parseInt","getAttribute","attributesWithoutStart","toggleOrderedList","chain","toggleList","updateAttributes","getAttributes","run","addInputRules","inputRule","wrappingInputRule","find"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-list-item\\src\\list-item.ts","C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-text-style\\src\\text-style.ts","C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-ordered-list\\src\\ordered-list.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ListItemOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\nexport const ListItem = Node.create<ListItemOptions>({\n  name: 'listItem',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'paragraph block*',\n\n  defining: true,\n\n  parseHTML() {\n    return [\n      {\n        tag: 'li',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\n    }\n  },\n})\n","import {\n  getMarkAttributes,\n  Mark,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface TextStyleOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textStyle: {\n      /**\n       * Remove spans without inline style attributes.\n       */\n      removeEmptyTextStyle: () => ReturnType,\n    }\n  }\n}\n\nexport const TextStyle = Mark.create<TextStyleOptions>({\n  name: 'textStyle',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'span',\n        getAttrs: element => {\n          const hasStyles = (element as HTMLElement).hasAttribute('style')\n\n          if (!hasStyles) {\n            return false\n          }\n\n          return {}\n        },\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => ({ state, commands }) => {\n        const attributes = getMarkAttributes(state, this.type)\n        const hasStyles = Object.entries(attributes).some(([, value]) => !!value)\n\n        if (hasStyles) {\n          return true\n        }\n\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n})\n","import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nimport ListItem from '../../extension-list-item/src'\nimport TextStyle from '../../extension-text-style/src'\n\nexport interface OrderedListOptions {\n  itemTypeName: string,\n  HTMLAttributes: Record<string, any>,\n  keepMarks: boolean,\n  keepAttributes: boolean,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    orderedList: {\n      /**\n       * Toggle an ordered list\n       */\n      toggleOrderedList: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /^(\\d+)\\.\\s$/\n\nexport const OrderedList = Node.create<OrderedListOptions>({\n  name: 'orderedList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false,\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start')\n            ? parseInt(element.getAttribute('start') || '', 10)\n            : 1\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'ol',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const { start, ...attributesWithoutStart } = HTMLAttributes\n\n    return start === 1\n      ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\n      : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({ commands, chain }) => {\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run()\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\n    }\n  },\n\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n    })\n\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: () => { return this.editor.getAttributes(TextStyle.name) },\n        editor: this.editor,\n      })\n    }\n    return [\n      inputRule,\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}