{"ast":null,"code":"import _slicedToArray from \"C:/Users/petew/OneDrive/Desktop/Web Dev Reboot/react-boat-info/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { Mark, mergeAttributes, getMarkAttributes } from '@tiptap/core';\nvar TextStyle = Mark.create({\n  name: 'textStyle',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'span',\n      getAttrs: function getAttrs(element) {\n        var hasStyles = element.hasAttribute('style');\n        if (!hasStyles) {\n          return false;\n        }\n        return {};\n      }\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      removeEmptyTextStyle: function removeEmptyTextStyle() {\n        return function (_ref2) {\n          var state = _ref2.state,\n            commands = _ref2.commands;\n          var attributes = getMarkAttributes(state, _this.type);\n          var hasStyles = Object.entries(attributes).some(function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n              value = _ref4[1];\n            return !!value;\n          });\n          if (hasStyles) {\n            return true;\n          }\n          return commands.unsetMark(_this.name);\n        };\n      }\n    };\n  }\n});\nexport { TextStyle, TextStyle as default };","map":{"version":3,"mappings":";;AAqBa,aAAS,GAAGA,IAAI,CAACC,MAAM,CAAmB;EACrDC,IAAI,EAAE,WAAW;EAEjBC,UAAU;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,SAAS;IACP,OAAO,CACL;MACEC,GAAG,EAAE,MAAM;MACXC,QAAQ,EAAE,yBAAO,EAAG;QAClB,IAAMC,SAAS,GAAIC,OAAuB,CAACC,YAAY,CAAC,OAAO,CAAC;QAEhE,IAAI,CAACF,SAAS,EAAE;UACd,OAAO,KAAK;QACb;QAED,OAAO,EAAE;;IAEZ,EACF;GACF;EAEDG,UAAU,4BAAmB;IAAA,IAAhBP,cAAc,QAAdA,cAAc;IACzB,OAAO,CAAC,MAAM,EAAEQ,eAAe,CAAC,IAAI,CAACC,OAAO,CAACT,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GACjF;EAEDU,WAAW;IAAA;IACT,OAAO;MACLC,oBAAoB,EAAE;QAAA,OAAM,iBAAwB;UAAA,IAArBC,KAAK,SAALA,KAAK;YAAEC,QAAQ,SAARA,QAAQ;UAC5C,IAAMC,UAAU,GAAGC,iBAAiB,CAACH,KAAK,EAAE,KAAI,CAACI,IAAI,CAAC;UACtD,IAAMZ,SAAS,GAAGa,MAAM,CAACC,OAAO,CAACJ,UAAU,CAAC,CAACK,IAAI,CAAC;YAAA;cAAIC,KAAK;YAAA,OAAM,CAAC,CAACA,KAAK;UAAA,EAAC;UAEzE,IAAIhB,SAAS,EAAE;YACb,OAAO,IAAI;UACZ;UAED,OAAOS,QAAQ,CAACQ,SAAS,CAAC,KAAI,CAACvB,IAAI,CAAC;SACrC;MAAA;KACF;;AAGJ","names":["Mark","create","name","addOptions","HTMLAttributes","parseHTML","tag","getAttrs","hasStyles","element","hasAttribute","renderHTML","mergeAttributes","options","addCommands","removeEmptyTextStyle","state","commands","attributes","getMarkAttributes","type","Object","entries","some","value","unsetMark"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-text-style\\src\\text-style.ts"],"sourcesContent":["import {\n  getMarkAttributes,\n  Mark,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface TextStyleOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textStyle: {\n      /**\n       * Remove spans without inline style attributes.\n       */\n      removeEmptyTextStyle: () => ReturnType,\n    }\n  }\n}\n\nexport const TextStyle = Mark.create<TextStyleOptions>({\n  name: 'textStyle',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'span',\n        getAttrs: element => {\n          const hasStyles = (element as HTMLElement).hasAttribute('style')\n\n          if (!hasStyles) {\n            return false\n          }\n\n          return {}\n        },\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => ({ state, commands }) => {\n        const attributes = getMarkAttributes(state, this.type)\n        const hasStyles = Object.entries(attributes).some(([, value]) => !!value)\n\n        if (hasStyles) {\n          return true\n        }\n\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}