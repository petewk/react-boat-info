{"ast":null,"code":"import _slicedToArray from \"C:/Users/petew/OneDrive/Desktop/Web Dev Reboot/react-boat-info/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { Node, mergeAttributes, nodeInputRule } from '@tiptap/core';\nvar inputRegex = /(?:^|\\s)(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\))$/;\nvar Image = Node.create({\n  name: 'image',\n  addOptions: function addOptions() {\n    return {\n      inline: false,\n      allowBase64: false,\n      HTMLAttributes: {}\n    };\n  },\n  inline: function inline() {\n    return this.options.inline;\n  },\n  group: function group() {\n    return this.options.inline ? 'inline' : 'block';\n  },\n  draggable: true,\n  addAttributes: function addAttributes() {\n    return {\n      src: {\n        default: null\n      },\n      alt: {\n        default: null\n      },\n      title: {\n        default: null\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: this.options.allowBase64 ? 'img[src]' : 'img[src]:not([src^=\"data:\"])'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['img', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setImage: function setImage(options) {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.insertContent({\n            type: _this.name,\n            attrs: options\n          });\n        };\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [nodeInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: function getAttributes(match) {\n        var _match = _slicedToArray(match, 5),\n          alt = _match[2],\n          src = _match[3],\n          title = _match[4];\n        return {\n          src: src,\n          alt: alt,\n          title: title\n        };\n      }\n    })];\n  }\n});\nexport { Image, Image as default, inputRegex };","map":{"version":3,"mappings":";;AAuBO,IAAMA,UAAU,GAAG;AAEb,SAAK,GAAGC,IAAI,CAACC,MAAM,CAAe;EAC7CC,IAAI,EAAE,OAAO;EAEbC,UAAU;IACR,OAAO;MACLC,MAAM,EAAE,KAAK;MACbC,WAAW,EAAE,KAAK;MAClBC,cAAc,EAAE;KACjB;GACF;EAEDF,MAAM;IACJ,OAAO,IAAI,CAACG,OAAO,CAACH,MAAM;GAC3B;EAEDI,KAAK;IACH,OAAO,IAAI,CAACD,OAAO,CAACH,MAAM,GAAG,QAAQ,GAAG,OAAO;GAChD;EAEDK,SAAS,EAAE,IAAI;EAEfC,aAAa;IACX,OAAO;MACLC,GAAG,EAAE;QACHC,OAAO,EAAE;MACV;MACDC,GAAG,EAAE;QACHD,OAAO,EAAE;MACV;MACDE,KAAK,EAAE;QACLF,OAAO,EAAE;MACV;KACF;GACF;EAEDG,SAAS;IACP,OAAO,CACL;MACEC,GAAG,EAAE,IAAI,CAACT,OAAO,CAACF,WAAW,GACzB,UAAU,GACV;IACL,EACF;GACF;EAEDY,UAAU,4BAAmB;IAAA,IAAhBX,cAAc,QAAdA,cAAc;IACzB,OAAO,CAAC,KAAK,EAAEY,eAAe,CAAC,IAAI,CAACX,OAAO,CAACD,cAAc,EAAEA,cAAc,CAAC,CAAC;GAC7E;EAEDa,WAAW;IAAA;IACT,OAAO;MACLC,QAAQ,EAAE,yBAAO;QAAA,OAAI,iBAAiB;UAAA,IAAdC,QAAQ,SAARA,QAAQ;UAC9B,OAAOA,QAAQ,CAACC,aAAa,CAAC;YAC5BC,IAAI,EAAE,KAAI,CAACrB,IAAI;YACfsB,KAAK,EAAEjB;UACR,EAAC;SACH;MAAA;KACF;GACF;EAEDkB,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAE5B,UAAU;MAChBwB,IAAI,EAAE,IAAI,CAACA,IAAI;MACfK,aAAa,EAAE,4BAAK,EAAG;QACrB,4BAA6BC,KAAK;UAAxBhB,GAAG;UAAEF,GAAG;UAAEG,KAAK;QAEzB,OAAO;UAAEH,GAAG,EAAHA,GAAG;UAAEE,GAAG,EAAHA,GAAG;UAAEC,KAAK,EAALA;QAAK,CAAE;;KAE7B,CAAC,CACH;;AAEJ","names":["inputRegex","Node","create","name","addOptions","inline","allowBase64","HTMLAttributes","options","group","draggable","addAttributes","src","default","alt","title","parseHTML","tag","renderHTML","mergeAttributes","addCommands","setImage","commands","insertContent","type","attrs","addInputRules","nodeInputRule","find","getAttributes","match"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-image\\src\\image.ts"],"sourcesContent":["import {\n  mergeAttributes,\n  Node,\n  nodeInputRule,\n} from '@tiptap/core'\n\nexport interface ImageOptions {\n  inline: boolean,\n  allowBase64: boolean,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    image: {\n      /**\n       * Add an image\n       */\n      setImage: (options: { src: string, alt?: string, title?: string }) => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\))$/\n\nexport const Image = Node.create<ImageOptions>({\n  name: 'image',\n\n  addOptions() {\n    return {\n      inline: false,\n      allowBase64: false,\n      HTMLAttributes: {},\n    }\n  },\n\n  inline() {\n    return this.options.inline\n  },\n\n  group() {\n    return this.options.inline ? 'inline' : 'block'\n  },\n\n  draggable: true,\n\n  addAttributes() {\n    return {\n      src: {\n        default: null,\n      },\n      alt: {\n        default: null,\n      },\n      title: {\n        default: null,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: this.options.allowBase64\n          ? 'img[src]'\n          : 'img[src]:not([src^=\"data:\"])',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['img', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  addCommands() {\n    return {\n      setImage: options => ({ commands }) => {\n        return commands.insertContent({\n          type: this.name,\n          attrs: options,\n        })\n      },\n    }\n  },\n\n  addInputRules() {\n    return [\n      nodeInputRule({\n        find: inputRegex,\n        type: this.type,\n        getAttributes: match => {\n          const [,, alt, src, title] = match\n\n          return { src, alt, title }\n        },\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}