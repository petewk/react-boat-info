{"ast":null,"code":"import _slicedToArray from \"C:/Users/petew/OneDrive/Desktop/Web Dev Reboot/react-boat-info/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { Node, mergeAttributes, Mark, getMarkAttributes, wrappingInputRule } from '@tiptap/core';\nvar ListItem = Node.create({\n  name: 'listItem',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  content: 'paragraph block*',\n  defining: true,\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'li'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this = this;\n    return {\n      Enter: function Enter() {\n        return _this.editor.commands.splitListItem(_this.name);\n      },\n      Tab: function Tab() {\n        return _this.editor.commands.sinkListItem(_this.name);\n      },\n      'Shift-Tab': function ShiftTab() {\n        return _this.editor.commands.liftListItem(_this.name);\n      }\n    };\n  }\n});\nvar TextStyle = Mark.create({\n  name: 'textStyle',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'span',\n      getAttrs: function getAttrs(element) {\n        var hasStyles = element.hasAttribute('style');\n        if (!hasStyles) {\n          return false;\n        }\n        return {};\n      }\n    }];\n  },\n  renderHTML: function renderHTML(_ref2) {\n    var HTMLAttributes = _ref2.HTMLAttributes;\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this2 = this;\n    return {\n      removeEmptyTextStyle: function removeEmptyTextStyle() {\n        return function (_ref3) {\n          var state = _ref3.state,\n            commands = _ref3.commands;\n          var attributes = getMarkAttributes(state, _this2.type);\n          var hasStyles = Object.entries(attributes).some(function (_ref4) {\n            var _ref5 = _slicedToArray(_ref4, 2),\n              value = _ref5[1];\n            return !!value;\n          });\n          if (hasStyles) {\n            return true;\n          }\n          return commands.unsetMark(_this2.name);\n        };\n      }\n    };\n  }\n});\nvar inputRegex = /^\\s*([-+*])\\s$/;\nvar BulletList = Node.create({\n  name: 'bulletList',\n  addOptions: function addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false\n    };\n  },\n  group: 'block list',\n  content: function content() {\n    return \"\".concat(this.options.itemTypeName, \"+\");\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'ul'\n    }];\n  },\n  renderHTML: function renderHTML(_ref6) {\n    var HTMLAttributes = _ref6.HTMLAttributes;\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this3 = this;\n    return {\n      toggleBulletList: function toggleBulletList() {\n        return function (_ref7) {\n          var commands = _ref7.commands,\n            chain = _ref7.chain;\n          if (_this3.options.keepAttributes) {\n            return chain().toggleList(_this3.name, _this3.options.itemTypeName, _this3.options.keepMarks).updateAttributes(ListItem.name, _this3.editor.getAttributes(TextStyle.name)).run();\n          }\n          return commands.toggleList(_this3.name, _this3.options.itemTypeName, _this3.options.keepMarks);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this4 = this;\n    return {\n      'Mod-Shift-8': function ModShift8() {\n        return _this4.editor.commands.toggleBulletList();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    var _this5 = this;\n    var inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type\n    });\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: function getAttributes() {\n          return _this5.editor.getAttributes(TextStyle.name);\n        },\n        editor: this.editor\n      });\n    }\n    return [inputRule];\n  }\n});\nexport { BulletList, BulletList as default, inputRegex };","map":{"version":3,"mappings":"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","names":["ListItem","Node","create","name","addOptions","HTMLAttributes","content","defining","parseHTML","tag","renderHTML","mergeAttributes","options","addKeyboardShortcuts","Enter","editor","commands","splitListItem","Tab","sinkListItem","liftListItem","TextStyle","Mark","getAttrs","hasStyles","element","hasAttribute","addCommands","removeEmptyTextStyle","state","attributes","getMarkAttributes","type","Object","entries","some","value","unsetMark","inputRegex","itemTypeName","keepMarks","keepAttributes","group","toggleBulletList","chain","toggleList","updateAttributes","getAttributes","run","addInputRules","inputRule","wrappingInputRule","find"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-list-item\\src\\list-item.ts","C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-text-style\\src\\text-style.ts","C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-bullet-list\\src\\bullet-list.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ListItemOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\nexport const ListItem = Node.create<ListItemOptions>({\n  name: 'listItem',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'paragraph block*',\n\n  defining: true,\n\n  parseHTML() {\n    return [\n      {\n        tag: 'li',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\n    }\n  },\n})\n","import {\n  getMarkAttributes,\n  Mark,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface TextStyleOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textStyle: {\n      /**\n       * Remove spans without inline style attributes.\n       */\n      removeEmptyTextStyle: () => ReturnType,\n    }\n  }\n}\n\nexport const TextStyle = Mark.create<TextStyleOptions>({\n  name: 'textStyle',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'span',\n        getAttrs: element => {\n          const hasStyles = (element as HTMLElement).hasAttribute('style')\n\n          if (!hasStyles) {\n            return false\n          }\n\n          return {}\n        },\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => ({ state, commands }) => {\n        const attributes = getMarkAttributes(state, this.type)\n        const hasStyles = Object.entries(attributes).some(([, value]) => !!value)\n\n        if (hasStyles) {\n          return true\n        }\n\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n})\n","import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nimport ListItem from '../../extension-list-item/src'\nimport TextStyle from '../../extension-text-style/src'\n\nexport interface BulletListOptions {\n  itemTypeName: string,\n  HTMLAttributes: Record<string, any>,\n  keepMarks: boolean,\n  keepAttributes: boolean,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bulletList: {\n      /**\n       * Toggle a bullet list\n       */\n      toggleBulletList: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /^\\s*([-+*])\\s$/\n\nexport const BulletList = Node.create<BulletListOptions>({\n  name: 'bulletList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false,\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  parseHTML() {\n    return [\n      { tag: 'ul' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleBulletList: () => ({ commands, chain }) => {\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run()\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n    })\n\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: () => { return this.editor.getAttributes(TextStyle.name) },\n        editor: this.editor,\n      })\n    }\n    return [\n      inputRule,\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}