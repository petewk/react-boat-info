{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nvar starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/;\nvar starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/g;\nvar underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/;\nvar underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/g;\nvar Italic = Mark.create({\n  name: 'italic',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'em'\n    }, {\n      tag: 'i',\n      getAttrs: function getAttrs(node) {\n        return node.style.fontStyle !== 'normal' && null;\n      }\n    }, {\n      style: 'font-style=italic'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setItalic: function setItalic() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark(_this.name);\n        };\n      },\n      toggleItalic: function toggleItalic() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark(_this.name);\n        };\n      },\n      unsetItalic: function unsetItalic() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark(_this.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-i': function ModI() {\n        return _this2.editor.commands.toggleItalic();\n      },\n      'Mod-I': function ModI() {\n        return _this2.editor.commands.toggleItalic();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [markInputRule({\n      find: starInputRegex,\n      type: this.type\n    }), markInputRule({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules: function addPasteRules() {\n    return [markPasteRule({\n      find: starPasteRegex,\n      type: this.type\n    }), markPasteRule({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Italic, Italic as default, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };","map":{"version":3,"mappings":";AA8BO,IAAMA,cAAc,GAAG;AACvB,IAAMC,cAAc,GAAG;AACvB,IAAMC,oBAAoB,GAAG;AAC7B,IAAMC,oBAAoB,GAAG;AAEvB,UAAM,GAAGC,IAAI,CAACC,MAAM,CAAgB;EAC/CC,IAAI,EAAE,QAAQ;EAEdC,UAAU;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,SAAS;IACP,OAAO,CACL;MACEC,GAAG,EAAE;IACN,GACD;MACEA,GAAG,EAAE,GAAG;MACRC,QAAQ,EAAE,sBAAI;QAAA,OAAKC,IAAoB,CAACC,KAAK,CAACC,SAAS,KAAK,QAAQ,IAAI,IAAI;MAAA;IAC7E,GACD;MACED,KAAK,EAAE;IACR,EACF;GACF;EAEDE,UAAU,4BAAmB;IAAA,IAAhBP,cAAc,QAAdA,cAAc;IACzB,OAAO,CAAC,IAAI,EAAEQ,eAAe,CAAC,IAAI,CAACC,OAAO,CAACT,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GAC/E;EAEDU,WAAW;IAAA;IACT,OAAO;MACLC,SAAS,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAdC,QAAQ,SAARA,QAAQ;UAC1B,OAAOA,QAAQ,CAACC,OAAO,CAAC,KAAI,CAACf,IAAI,CAAC;SACnC;MAAA;MACDgB,YAAY,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAdF,QAAQ,SAARA,QAAQ;UAC7B,OAAOA,QAAQ,CAACG,UAAU,CAAC,KAAI,CAACjB,IAAI,CAAC;SACtC;MAAA;MACDkB,WAAW,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAdJ,QAAQ,SAARA,QAAQ;UAC5B,OAAOA,QAAQ,CAACK,SAAS,CAAC,KAAI,CAACnB,IAAI,CAAC;SACrC;MAAA;KACF;GACF;EAEDoB,oBAAoB;IAAA;IAClB,OAAO;MACL,OAAO,EAAE;QAAA,OAAM,MAAI,CAACC,MAAM,CAACP,QAAQ,CAACE,YAAY,EAAE;MAAA;MAClD,OAAO,EAAE;QAAA,OAAM,MAAI,CAACK,MAAM,CAACP,QAAQ,CAACE,YAAY,EAAE;MAAA;KACnD;GACF;EAEDM,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAE9B,cAAc;MACpB+B,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,EACFF,aAAa,CAAC;MACZC,IAAI,EAAE5B,oBAAoB;MAC1B6B,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;GACF;EAEDC,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZH,IAAI,EAAE7B,cAAc;MACpB8B,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,EACFE,aAAa,CAAC;MACZH,IAAI,EAAE3B,oBAAoB;MAC1B4B,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;;AAEJ","names":["starInputRegex","starPasteRegex","underscoreInputRegex","underscorePasteRegex","Mark","create","name","addOptions","HTMLAttributes","parseHTML","tag","getAttrs","node","style","fontStyle","renderHTML","mergeAttributes","options","addCommands","setItalic","commands","setMark","toggleItalic","toggleMark","unsetItalic","unsetMark","addKeyboardShortcuts","editor","addInputRules","markInputRule","find","type","addPasteRules","markPasteRule"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-italic\\src\\italic.ts"],"sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface ItalicOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    italic: {\n      /**\n       * Set an italic mark\n       */\n      setItalic: () => ReturnType,\n      /**\n       * Toggle an italic mark\n       */\n      toggleItalic: () => ReturnType,\n      /**\n       * Unset an italic mark\n       */\n      unsetItalic: () => ReturnType,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/\nexport const starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/g\nexport const underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/\nexport const underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/g\n\nexport const Italic = Mark.create<ItalicOptions>({\n  name: 'italic',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'em',\n      },\n      {\n        tag: 'i',\n        getAttrs: node => (node as HTMLElement).style.fontStyle !== 'normal' && null,\n      },\n      {\n        style: 'font-style=italic',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setItalic: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleItalic: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetItalic: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n      'Mod-I': () => this.editor.commands.toggleItalic(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}