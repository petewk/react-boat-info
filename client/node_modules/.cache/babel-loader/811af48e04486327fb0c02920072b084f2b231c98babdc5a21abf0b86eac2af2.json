{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\petew\\\\OneDrive\\\\Desktop\\\\Web Dev Reboot\\\\react-boat-info\\\\client\\\\src\\\\components\\\\lexical.js\",\n  _s = $RefreshSig$();\nimport { $getRoot, $getSelection } from 'lexical';\nimport { useEffect } from 'react';\nimport { LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { PlainTextPlugin } from '@lexical/react/LexicalPlainTextPlugin';\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exampleTheme = {\n  ltr: 'ltr',\n  rtl: 'rtl',\n  placeholder: 'editor-placeholder',\n  paragraph: 'editor-paragraph',\n  quote: 'editor-quote',\n  heading: {\n    h1: 'editor-heading-h1',\n    h2: 'editor-heading-h2',\n    h3: 'editor-heading-h3',\n    h4: 'editor-heading-h4',\n    h5: 'editor-heading-h5',\n    h6: 'editor-heading-h6'\n  },\n  list: {\n    nested: {\n      listitem: 'editor-nested-listitem'\n    },\n    ol: 'editor-list-ol',\n    ul: 'editor-list-ul',\n    listitem: 'editor-listItem',\n    listitemChecked: 'editor-listItemChecked',\n    listitemUnchecked: 'editor-listItemUnchecked'\n  },\n  hashtag: 'editor-hashtag',\n  image: 'editor-image',\n  link: 'editor-link',\n  text: {\n    bold: 'editor-textBold',\n    code: 'editor-textCode',\n    italic: 'editor-textItalic',\n    strikethrough: 'editor-textStrikethrough',\n    subscript: 'editor-textSubscript',\n    superscript: 'editor-textSuperscript',\n    underline: 'editor-textUnderline',\n    underlineStrikethrough: 'editor-textUnderlineStrikethrough'\n  },\n  code: 'editor-code',\n  codeHighlight: {\n    atrule: 'editor-tokenAttr',\n    attr: 'editor-tokenAttr',\n    boolean: 'editor-tokenProperty',\n    builtin: 'editor-tokenSelector',\n    cdata: 'editor-tokenComment',\n    char: 'editor-tokenSelector',\n    class: 'editor-tokenFunction',\n    'class-name': 'editor-tokenFunction',\n    comment: 'editor-tokenComment',\n    constant: 'editor-tokenProperty',\n    deleted: 'editor-tokenProperty',\n    doctype: 'editor-tokenComment',\n    entity: 'editor-tokenOperator',\n    function: 'editor-tokenFunction',\n    important: 'editor-tokenVariable',\n    inserted: 'editor-tokenSelector',\n    keyword: 'editor-tokenAttr',\n    namespace: 'editor-tokenVariable',\n    number: 'editor-tokenProperty',\n    operator: 'editor-tokenOperator',\n    prolog: 'editor-tokenComment',\n    property: 'editor-tokenProperty',\n    punctuation: 'editor-tokenPunctuation',\n    regex: 'editor-tokenVariable',\n    selector: 'editor-tokenSelector',\n    string: 'editor-tokenSelector',\n    symbol: 'editor-tokenProperty',\n    tag: 'editor-tokenProperty',\n    url: 'editor-tokenOperator',\n    variable: 'editor-tokenVariable'\n  }\n};\n\n// When the editor changes, you can get notified via the\n// LexicalOnChangePlugin!\nfunction onChange(editorState) {\n  editorState.read(() => {\n    // Read the contents of the EditorState here.\n    const root = $getRoot();\n    const selection = $getSelection();\n    console.log(root, selection);\n  });\n}\n\n// Lexical React plugins are React components, which makes them\n// highly composable. Furthermore, you can lazy load plugins if\n// desired, so you don't pay the cost for plugins until you\n// actually use them.\nfunction MyCustomAutoFocusPlugin() {\n  _s();\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    // Focus the editor when the effect fires!\n    editor.focus();\n  }, [editor]);\n  return null;\n}\n\n// Catch any errors that occur during Lexical updates and log them\n// or throw them as needed. If you don't throw them, Lexical will\n// try to recover gracefully without losing user data.\n_s(MyCustomAutoFocusPlugin, \"mCqe7sh4aC9mLBXPHfG3d/PNTaQ=\", false, function () {\n  return [useLexicalComposerContext];\n});\n_c = MyCustomAutoFocusPlugin;\nfunction onError(error) {\n  console.error(error);\n}\nfunction Editor() {\n  const initialConfig = {\n    namespace: 'MyEditor',\n    theme,\n    onError\n  };\n  return /*#__PURE__*/_jsxDEV(LexicalComposer, {\n    initialConfig: initialConfig,\n    children: [/*#__PURE__*/_jsxDEV(PlainTextPlugin, {\n      contentEditable: /*#__PURE__*/_jsxDEV(ContentEditable, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 26\n      }, this),\n      placeholder: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Enter some text...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 22\n      }, this),\n      ErrorBoundary: LexicalErrorBoundary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OnChangePlugin, {\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HistoryPlugin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyCustomAutoFocusPlugin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Editor;\nexport default Editor;\nvar _c, _c2;\n$RefreshReg$(_c, \"MyCustomAutoFocusPlugin\");\n$RefreshReg$(_c2, \"Editor\");","map":{"version":3,"names":["$getRoot","$getSelection","useEffect","LexicalComposer","PlainTextPlugin","ContentEditable","HistoryPlugin","OnChangePlugin","useLexicalComposerContext","LexicalErrorBoundary","exampleTheme","ltr","rtl","placeholder","paragraph","quote","heading","h1","h2","h3","h4","h5","h6","list","nested","listitem","ol","ul","listitemChecked","listitemUnchecked","hashtag","image","link","text","bold","code","italic","strikethrough","subscript","superscript","underline","underlineStrikethrough","codeHighlight","atrule","attr","boolean","builtin","cdata","char","class","comment","constant","deleted","doctype","entity","function","important","inserted","keyword","namespace","number","operator","prolog","property","punctuation","regex","selector","string","symbol","tag","url","variable","onChange","editorState","read","root","selection","console","log","MyCustomAutoFocusPlugin","editor","focus","onError","error","Editor","initialConfig","theme"],"sources":["C:/Users/petew/OneDrive/Desktop/Web Dev Reboot/react-boat-info/client/src/components/lexical.js"],"sourcesContent":["import {$getRoot, $getSelection} from 'lexical';\r\nimport {useEffect} from 'react';\r\n\r\nimport {LexicalComposer} from '@lexical/react/LexicalComposer';\r\nimport {PlainTextPlugin} from '@lexical/react/LexicalPlainTextPlugin';\r\nimport {ContentEditable} from '@lexical/react/LexicalContentEditable';\r\nimport {HistoryPlugin} from '@lexical/react/LexicalHistoryPlugin';\r\nimport {OnChangePlugin} from '@lexical/react/LexicalOnChangePlugin';\r\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\r\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\r\n\r\nimport '../App.css';\r\n\r\nconst exampleTheme = {\r\n    ltr: 'ltr',\r\n    rtl: 'rtl',\r\n    placeholder: 'editor-placeholder',\r\n    paragraph: 'editor-paragraph',\r\n    quote: 'editor-quote',\r\n    heading: {\r\n      h1: 'editor-heading-h1',\r\n      h2: 'editor-heading-h2',\r\n      h3: 'editor-heading-h3',\r\n      h4: 'editor-heading-h4',\r\n      h5: 'editor-heading-h5',\r\n      h6: 'editor-heading-h6',\r\n    },\r\n    list: {\r\n      nested: {\r\n        listitem: 'editor-nested-listitem',\r\n      },\r\n      ol: 'editor-list-ol',\r\n      ul: 'editor-list-ul',\r\n      listitem: 'editor-listItem',\r\n      listitemChecked: 'editor-listItemChecked',\r\n      listitemUnchecked: 'editor-listItemUnchecked',\r\n    },\r\n    hashtag: 'editor-hashtag',\r\n    image: 'editor-image',\r\n    link: 'editor-link',\r\n    text: {\r\n      bold: 'editor-textBold',\r\n      code: 'editor-textCode',\r\n      italic: 'editor-textItalic',\r\n      strikethrough: 'editor-textStrikethrough',\r\n      subscript: 'editor-textSubscript',\r\n      superscript: 'editor-textSuperscript',\r\n      underline: 'editor-textUnderline',\r\n      underlineStrikethrough: 'editor-textUnderlineStrikethrough',\r\n    },\r\n    code: 'editor-code',\r\n    codeHighlight: {\r\n      atrule: 'editor-tokenAttr',\r\n      attr: 'editor-tokenAttr',\r\n      boolean: 'editor-tokenProperty',\r\n      builtin: 'editor-tokenSelector',\r\n      cdata: 'editor-tokenComment',\r\n      char: 'editor-tokenSelector',\r\n      class: 'editor-tokenFunction',\r\n      'class-name': 'editor-tokenFunction',\r\n      comment: 'editor-tokenComment',\r\n      constant: 'editor-tokenProperty',\r\n      deleted: 'editor-tokenProperty',\r\n      doctype: 'editor-tokenComment',\r\n      entity: 'editor-tokenOperator',\r\n      function: 'editor-tokenFunction',\r\n      important: 'editor-tokenVariable',\r\n      inserted: 'editor-tokenSelector',\r\n      keyword: 'editor-tokenAttr',\r\n      namespace: 'editor-tokenVariable',\r\n      number: 'editor-tokenProperty',\r\n      operator: 'editor-tokenOperator',\r\n      prolog: 'editor-tokenComment',\r\n      property: 'editor-tokenProperty',\r\n      punctuation: 'editor-tokenPunctuation',\r\n      regex: 'editor-tokenVariable',\r\n      selector: 'editor-tokenSelector',\r\n      string: 'editor-tokenSelector',\r\n      symbol: 'editor-tokenProperty',\r\n      tag: 'editor-tokenProperty',\r\n      url: 'editor-tokenOperator',\r\n      variable: 'editor-tokenVariable',\r\n    },\r\n  };\r\n\r\n// When the editor changes, you can get notified via the\r\n// LexicalOnChangePlugin!\r\nfunction onChange(editorState) {\r\n  editorState.read(() => {\r\n    // Read the contents of the EditorState here.\r\n    const root = $getRoot();\r\n    const selection = $getSelection();\r\n\r\n    console.log(root, selection);\r\n  });\r\n}\r\n\r\n// Lexical React plugins are React components, which makes them\r\n// highly composable. Furthermore, you can lazy load plugins if\r\n// desired, so you don't pay the cost for plugins until you\r\n// actually use them.\r\nfunction MyCustomAutoFocusPlugin() {\r\n  const [editor] = useLexicalComposerContext();\r\n\r\n  useEffect(() => {\r\n    // Focus the editor when the effect fires!\r\n    editor.focus();\r\n  }, [editor]);\r\n\r\n  return null;\r\n}\r\n\r\n// Catch any errors that occur during Lexical updates and log them\r\n// or throw them as needed. If you don't throw them, Lexical will\r\n// try to recover gracefully without losing user data.\r\nfunction onError(error) {\r\n  console.error(error);\r\n}\r\n\r\nfunction Editor() {\r\n  const initialConfig = {\r\n    namespace: 'MyEditor', \r\n    theme,\r\n    onError,\r\n  };\r\n\r\n  return (\r\n    <LexicalComposer initialConfig={initialConfig}>\r\n      <PlainTextPlugin\r\n        contentEditable={<ContentEditable />}\r\n        placeholder={<div>Enter some text...</div>}\r\n        ErrorBoundary={LexicalErrorBoundary}\r\n      />\r\n      <OnChangePlugin onChange={onChange} />\r\n      <HistoryPlugin />\r\n      <MyCustomAutoFocusPlugin />\r\n    </LexicalComposer>\r\n  );\r\n}\r\n\r\nexport default Editor;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}