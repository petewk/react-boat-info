{"ast":null,"code":"/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n'use strict';\n\nvar clipboard = require('@lexical/clipboard');\nvar selection = require('@lexical/selection');\nvar utils = require('@lexical/utils');\nvar lexical = require('lexical');\n\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n\nfunction caretFromPoint(x, y) {\n  if (typeof document.caretRangeFromPoint !== 'undefined') {\n    const range = document.caretRangeFromPoint(x, y);\n    if (range === null) {\n      return null;\n    }\n    return {\n      node: range.startContainer,\n      offset: range.startOffset\n    };\n    // @ts-ignore\n  } else if (document.caretPositionFromPoint !== 'undefined') {\n    // @ts-ignore FF - no types\n    const range = document.caretPositionFromPoint(x, y);\n    if (range === null) {\n      return null;\n    }\n    return {\n      node: range.offsetNode,\n      offset: range.offset\n    };\n  } else {\n    // Gracefully handle IE\n    return null;\n  }\n}\n\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nCAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nCAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\n// export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/** @module @lexical/rich-text */\nconst DRAG_DROP_PASTE = lexical.createCommand('DRAG_DROP_PASTE_FILE');\n/** @noInheritDoc */\nclass QuoteNode extends lexical.ElementNode {\n  static getType() {\n    return 'quote';\n  }\n  static clone(node) {\n    return new QuoteNode(node.__key);\n  }\n  constructor(key) {\n    super(key);\n  }\n\n  // View\n\n  createDOM(config) {\n    const element = document.createElement('blockquote');\n    utils.addClassNamesToElement(element, config.theme.quote);\n    return element;\n  }\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      blockquote: node => ({\n        conversion: convertBlockquoteElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createQuoteNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'quote'\n    };\n  }\n\n  // Mutation\n\n  insertNewAfter(_, restoreSelection) {\n    const newBlock = lexical.$createParagraphNode();\n    const direction = this.getDirection();\n    newBlock.setDirection(direction);\n    this.insertAfter(newBlock, restoreSelection);\n    return newBlock;\n  }\n  collapseAtStart() {\n    const paragraph = lexical.$createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => paragraph.append(child));\n    this.replace(paragraph);\n    return true;\n  }\n}\nfunction $createQuoteNode() {\n  return lexical.$applyNodeReplacement(new QuoteNode());\n}\nfunction $isQuoteNode(node) {\n  return node instanceof QuoteNode;\n}\n/** @noInheritDoc */\nclass HeadingNode extends lexical.ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'heading';\n  }\n  static clone(node) {\n    return new HeadingNode(node.__tag, node.__key);\n  }\n  constructor(tag, key) {\n    super(key);\n    this.__tag = tag;\n  }\n  getTag() {\n    return this.__tag;\n  }\n\n  // View\n\n  createDOM(config) {\n    const tag = this.__tag;\n    const element = document.createElement(tag);\n    const theme = config.theme;\n    const classNames = theme.heading;\n    if (classNames !== undefined) {\n      const className = classNames[tag];\n      utils.addClassNamesToElement(element, className);\n    }\n    return element;\n  }\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      h1: node => ({\n        conversion: convertHeadingElement,\n        priority: 0\n      }),\n      h2: node => ({\n        conversion: convertHeadingElement,\n        priority: 0\n      }),\n      h3: node => ({\n        conversion: convertHeadingElement,\n        priority: 0\n      }),\n      h4: node => ({\n        conversion: convertHeadingElement,\n        priority: 0\n      }),\n      h5: node => ({\n        conversion: convertHeadingElement,\n        priority: 0\n      }),\n      h6: node => ({\n        conversion: convertHeadingElement,\n        priority: 0\n      }),\n      p: node => {\n        // domNode is a <p> since we matched it by nodeName\n        const paragraph = node;\n        const firstChild = paragraph.firstChild;\n        if (firstChild !== null && isGoogleDocsTitle(firstChild)) {\n          return {\n            conversion: () => ({\n              node: null\n            }),\n            priority: 3\n          };\n        }\n        return null;\n      },\n      span: node => {\n        if (isGoogleDocsTitle(node)) {\n          return {\n            conversion: domNode => {\n              return {\n                node: $createHeadingNode('h1')\n              };\n            },\n            priority: 3\n          };\n        }\n        return null;\n      }\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createHeadingNode(serializedNode.tag);\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      tag: this.getTag(),\n      type: 'heading',\n      version: 1\n    };\n  }\n\n  // Mutation\n  insertNewAfter(selection) {\n    let restoreSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const anchorOffet = selection ? selection.anchor.offset : 0;\n    const newElement = anchorOffet > 0 && anchorOffet < this.getTextContentSize() ? $createHeadingNode(this.getTag()) : lexical.$createParagraphNode();\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n  collapseAtStart() {\n    const newElement = !this.isEmpty() ? $createHeadingNode(this.getTag()) : lexical.$createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => newElement.append(child));\n    this.replace(newElement);\n    return true;\n  }\n  extractWithChild() {\n    return true;\n  }\n}\nfunction isGoogleDocsTitle(domNode) {\n  if (domNode.nodeName.toLowerCase() === 'span') {\n    return domNode.style.fontSize === '26pt';\n  }\n  return false;\n}\nfunction convertHeadingElement(domNode) {\n  const nodeName = domNode.nodeName.toLowerCase();\n  let node = null;\n  if (nodeName === 'h1' || nodeName === 'h2' || nodeName === 'h3' || nodeName === 'h4' || nodeName === 'h5' || nodeName === 'h6') {\n    node = $createHeadingNode(nodeName);\n  }\n  return {\n    node\n  };\n}\nfunction convertBlockquoteElement() {\n  const node = $createQuoteNode();\n  return {\n    node\n  };\n}\nfunction $createHeadingNode(headingTag) {\n  return lexical.$applyNodeReplacement(new HeadingNode(headingTag));\n}\nfunction $isHeadingNode(node) {\n  return node instanceof HeadingNode;\n}\nfunction onPasteForRichText(event, editor) {\n  event.preventDefault();\n  editor.update(() => {\n    const selection = lexical.$getSelection();\n    const clipboardData = event instanceof InputEvent || event instanceof KeyboardEvent ? null : event.clipboardData;\n    if (clipboardData != null && (lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection))) {\n      clipboard.$insertDataTransferForRichText(clipboardData, selection, editor);\n    }\n  }, {\n    tag: 'paste'\n  });\n}\nasync function onCutForRichText(event, editor) {\n  await clipboard.copyToClipboard__EXPERIMENTAL(editor, event instanceof ClipboardEvent ? event : null);\n  editor.update(() => {\n    const selection = lexical.$getSelection();\n    if (lexical.$isRangeSelection(selection)) {\n      selection.removeText();\n    } else if (lexical.$isNodeSelection(selection)) {\n      selection.getNodes().forEach(node => node.remove());\n    }\n  });\n}\n\n// Clipboard may contain files that we aren't allowed to read. While the event is arguably useless,\n// in certain ocassions, we want to know whether it was a file transfer, as opposed to text. We\n// control this with the first boolean flag.\nfunction eventFiles(event) {\n  let dataTransfer = null;\n  if (event instanceof DragEvent) {\n    dataTransfer = event.dataTransfer;\n  } else if (event instanceof ClipboardEvent) {\n    dataTransfer = event.clipboardData;\n  }\n  if (dataTransfer === null) {\n    return [false, [], false];\n  }\n  const types = dataTransfer.types;\n  const hasFiles = types.includes('Files');\n  const hasContent = types.includes('text/html') || types.includes('text/plain');\n  return [hasFiles, Array.from(dataTransfer.files), hasContent];\n}\nfunction handleIndentAndOutdent(insertTab, indentOrOutdent) {\n  const selection = lexical.$getSelection();\n  if (!lexical.$isRangeSelection(selection)) {\n    return;\n  }\n  const alreadyHandled = new Set();\n  const nodes = selection.getNodes();\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const key = node.getKey();\n    if (alreadyHandled.has(key)) {\n      continue;\n    }\n    const parentBlock = utils.$getNearestBlockElementAncestorOrThrow(node);\n    const parentKey = parentBlock.getKey();\n    if (parentBlock.canInsertTab()) {\n      insertTab(node);\n      alreadyHandled.add(key);\n    } else if (parentBlock.canIndent() && !alreadyHandled.has(parentKey)) {\n      alreadyHandled.add(parentKey);\n      indentOrOutdent(parentBlock);\n    }\n  }\n}\nfunction $isTargetWithinDecorator(target) {\n  const node = lexical.$getNearestNodeFromDOMNode(target);\n  return lexical.$isDecoratorNode(node);\n}\nfunction $isSelectionAtEndOfRoot(selection) {\n  const focus = selection.focus;\n  return focus.key === 'root' && focus.offset === lexical.$getRoot().getChildrenSize();\n}\nfunction registerRichText(editor) {\n  const removeListener = utils.mergeRegister(editor.registerCommand(lexical.CLICK_COMMAND, payload => {\n    const selection = lexical.$getSelection();\n    if (lexical.$isNodeSelection(selection)) {\n      selection.clear();\n      return true;\n    }\n    return false;\n  }, 0), editor.registerCommand(lexical.DELETE_CHARACTER_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteCharacter(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_WORD_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteWord(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_LINE_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteLine(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, eventOrText => {\n    const selection = lexical.$getSelection();\n    if (typeof eventOrText === 'string') {\n      if (lexical.$isRangeSelection(selection)) {\n        selection.insertText(eventOrText);\n      } else if (lexical.DEPRECATED_$isGridSelection(selection)) ;\n    } else {\n      if (!lexical.$isRangeSelection(selection) && !lexical.DEPRECATED_$isGridSelection(selection)) {\n        return false;\n      }\n      const dataTransfer = eventOrText.dataTransfer;\n      if (dataTransfer != null) {\n        clipboard.$insertDataTransferForRichText(dataTransfer, selection, editor);\n      } else if (lexical.$isRangeSelection(selection)) {\n        const data = eventOrText.data;\n        if (data) {\n          selection.insertText(data);\n        }\n        return true;\n      }\n    }\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.REMOVE_TEXT_COMMAND, () => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.removeText();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.FORMAT_TEXT_COMMAND, format => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.formatText(format);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.FORMAT_ELEMENT_COMMAND, format => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection) && !lexical.$isNodeSelection(selection)) {\n      return false;\n    }\n    const nodes = selection.getNodes();\n    for (const node of nodes) {\n      const element = utils.$getNearestBlockElementAncestorOrThrow(node);\n      element.setFormat(format);\n    }\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_LINE_BREAK_COMMAND, selectStart => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.insertLineBreak(selectStart);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_PARAGRAPH_COMMAND, () => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.insertParagraph();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INDENT_CONTENT_COMMAND, () => {\n    handleIndentAndOutdent(() => {\n      editor.dispatchCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, '\\t');\n    }, block => {\n      const indent = block.getIndent();\n      if (indent !== 10) {\n        block.setIndent(indent + 1);\n      }\n    });\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.OUTDENT_CONTENT_COMMAND, () => {\n    handleIndentAndOutdent(node => {\n      if (lexical.$isTextNode(node)) {\n        const textContent = node.getTextContent();\n        const character = textContent[textContent.length - 1];\n        if (character === '\\t') {\n          editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, true);\n        }\n      }\n    }, block => {\n      const indent = block.getIndent();\n      if (indent !== 0) {\n        block.setIndent(indent - 1);\n      }\n    });\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if (lexical.$isNodeSelection(selection) && !$isTargetWithinDecorator(event.target)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        nodes[0].selectPrevious();\n        return true;\n      }\n    } else if (lexical.$isRangeSelection(selection)) {\n      const possibleNode = lexical.$getAdjacentNode(selection.focus, true);\n      if (lexical.$isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\n        possibleNode.selectPrevious();\n        event.preventDefault();\n        return true;\n      } else if (lexical.$isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\n        possibleNode.select();\n        event.preventDefault();\n        return true;\n      }\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if (lexical.$isNodeSelection(selection)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        nodes[0].selectNext(0, 0);\n        return true;\n      }\n    } else if (lexical.$isRangeSelection(selection)) {\n      if ($isSelectionAtEndOfRoot(selection)) {\n        event.preventDefault();\n        return true;\n      }\n      const possibleNode = lexical.$getAdjacentNode(selection.focus, false);\n      if (lexical.$isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\n        possibleNode.selectNext();\n        event.preventDefault();\n        return true;\n      }\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, event => {\n    const selection$1 = lexical.$getSelection();\n    if (lexical.$isNodeSelection(selection$1)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection$1.getNodes();\n      if (nodes.length > 0) {\n        event.preventDefault();\n        nodes[0].selectPrevious();\n        return true;\n      }\n    }\n    if (!lexical.$isRangeSelection(selection$1)) {\n      return false;\n    }\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, true)) {\n      const isHoldingShift = event.shiftKey;\n      event.preventDefault();\n      selection.$moveCharacter(selection$1, isHoldingShift, true);\n      return true;\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_RIGHT_COMMAND, event => {\n    const selection$1 = lexical.$getSelection();\n    if (lexical.$isNodeSelection(selection$1) && !$isTargetWithinDecorator(event.target)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection$1.getNodes();\n      if (nodes.length > 0) {\n        event.preventDefault();\n        nodes[0].selectNext(0, 0);\n        return true;\n      }\n    }\n    if (!lexical.$isRangeSelection(selection$1)) {\n      return false;\n    }\n    const isHoldingShift = event.shiftKey;\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, false)) {\n      event.preventDefault();\n      selection.$moveCharacter(selection$1, isHoldingShift, false);\n      return true;\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, event => {\n    if ($isTargetWithinDecorator(event.target)) {\n      return false;\n    }\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    event.preventDefault();\n    const {\n      anchor\n    } = selection;\n    const anchorNode = anchor.getNode();\n    if (selection.isCollapsed() && anchor.offset === 0 && !lexical.$isRootNode(anchorNode)) {\n      const element = utils.$getNearestBlockElementAncestorOrThrow(anchorNode);\n      if (element.getIndent() > 0) {\n        return editor.dispatchCommand(lexical.OUTDENT_CONTENT_COMMAND, undefined);\n      }\n    }\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, true);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_DELETE_COMMAND, event => {\n    if ($isTargetWithinDecorator(event.target)) {\n      return false;\n    }\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    event.preventDefault();\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, false);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ENTER_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    if (event !== null) {\n      // If we have beforeinput, then we can avoid blocking\n      // the default behavior. This ensures that the iOS can\n      // intercept that we're actually inserting a paragraph,\n      // and autocomplete, autocapitalize etc work as intended.\n      // This can also cause a strange performance issue in\n      // Safari, where there is a noticeable pause due to\n      // preventing the key down of enter.\n      if ((IS_IOS || IS_SAFARI || IS_APPLE_WEBKIT) && CAN_USE_BEFORE_INPUT) {\n        return false;\n      }\n      event.preventDefault();\n      if (event.shiftKey) {\n        return editor.dispatchCommand(lexical.INSERT_LINE_BREAK_COMMAND, false);\n      }\n    }\n    return editor.dispatchCommand(lexical.INSERT_PARAGRAPH_COMMAND, undefined);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ESCAPE_COMMAND, () => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    editor.blur();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DROP_COMMAND, event => {\n    const [, files] = eventFiles(event);\n    if (files.length > 0) {\n      const x = event.clientX;\n      const y = event.clientY;\n      const eventRange = caretFromPoint(x, y);\n      if (eventRange !== null) {\n        const {\n          offset: domOffset,\n          node: domNode\n        } = eventRange;\n        const node = lexical.$getNearestNodeFromDOMNode(domNode);\n        if (node !== null) {\n          const selection = lexical.$createRangeSelection();\n          if (lexical.$isTextNode(node)) {\n            selection.anchor.set(node.getKey(), domOffset, 'text');\n            selection.focus.set(node.getKey(), domOffset, 'text');\n          } else {\n            const parentKey = node.getParentOrThrow().getKey();\n            const offset = node.getIndexWithinParent() + 1;\n            selection.anchor.set(parentKey, offset, 'element');\n            selection.focus.set(parentKey, offset, 'element');\n          }\n          const normalizedSelection = lexical.$normalizeSelection__EXPERIMENTAL(selection);\n          lexical.$setSelection(normalizedSelection);\n        }\n        editor.dispatchCommand(DRAG_DROP_PASTE, files);\n      }\n      event.preventDefault();\n      return true;\n    }\n    const selection = lexical.$getSelection();\n    if (lexical.$isRangeSelection(selection)) {\n      return true;\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DRAGSTART_COMMAND, event => {\n    const [isFileTransfer] = eventFiles(event);\n    const selection = lexical.$getSelection();\n    if (isFileTransfer && !lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DRAGOVER_COMMAND, event => {\n    const [isFileTransfer] = eventFiles(event);\n    const selection = lexical.$getSelection();\n    if (isFileTransfer && !lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    const x = event.clientX;\n    const y = event.clientY;\n    const eventRange = caretFromPoint(x, y);\n    if (eventRange !== null) {\n      const node = lexical.$getNearestNodeFromDOMNode(eventRange.node);\n      if (lexical.$isDecoratorNode(node)) {\n        // Show browser caret as the user is dragging the media across the screen. Won't work\n        // for DecoratorNode nor it's relevant.\n        event.preventDefault();\n      }\n    }\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.COPY_COMMAND, event => {\n    clipboard.copyToClipboard__EXPERIMENTAL(editor, event instanceof ClipboardEvent ? event : null);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CUT_COMMAND, event => {\n    onCutForRichText(event, editor);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.PASTE_COMMAND, event => {\n    const [, files, hasTextContent] = eventFiles(event);\n    if (files.length > 0 && !hasTextContent) {\n      editor.dispatchCommand(DRAG_DROP_PASTE, files);\n      return true;\n    }\n    const selection = lexical.$getSelection();\n    if (lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection)) {\n      onPasteForRichText(event, editor);\n      return true;\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR));\n  return removeListener;\n}\nexports.$createHeadingNode = $createHeadingNode;\nexports.$createQuoteNode = $createQuoteNode;\nexports.$isHeadingNode = $isHeadingNode;\nexports.$isQuoteNode = $isQuoteNode;\nexports.DRAG_DROP_PASTE = DRAG_DROP_PASTE;\nexports.HeadingNode = HeadingNode;\nexports.QuoteNode = QuoteNode;\nexports.eventFiles = eventFiles;\nexports.registerRichText = registerRichText;","map":{"version":3,"names":["clipboard","require","selection","utils","lexical","caretFromPoint","x","y","document","caretRangeFromPoint","range","node","startContainer","offset","startOffset","caretPositionFromPoint","offsetNode","CAN_USE_DOM","window","createElement","documentMode","test","navigator","platform","userAgent","CAN_USE_BEFORE_INPUT","InputEvent","IS_SAFARI","IS_IOS","MSStream","IS_CHROME","IS_APPLE_WEBKIT","DRAG_DROP_PASTE","createCommand","QuoteNode","ElementNode","getType","clone","__key","constructor","key","createDOM","config","element","addClassNamesToElement","theme","quote","updateDOM","prevNode","dom","importDOM","blockquote","conversion","convertBlockquoteElement","priority","importJSON","serializedNode","$createQuoteNode","setFormat","format","setIndent","indent","setDirection","direction","exportJSON","type","insertNewAfter","_","restoreSelection","newBlock","$createParagraphNode","getDirection","insertAfter","collapseAtStart","paragraph","children","getChildren","forEach","child","append","replace","$applyNodeReplacement","$isQuoteNode","HeadingNode","__tag","tag","getTag","classNames","heading","undefined","className","h1","convertHeadingElement","h2","h3","h4","h5","h6","p","firstChild","isGoogleDocsTitle","span","domNode","$createHeadingNode","version","anchorOffet","anchor","newElement","getTextContentSize","isEmpty","extractWithChild","nodeName","toLowerCase","style","fontSize","headingTag","$isHeadingNode","onPasteForRichText","event","editor","preventDefault","update","$getSelection","clipboardData","KeyboardEvent","$isRangeSelection","DEPRECATED_$isGridSelection","$insertDataTransferForRichText","onCutForRichText","copyToClipboard__EXPERIMENTAL","ClipboardEvent","removeText","$isNodeSelection","getNodes","remove","eventFiles","dataTransfer","DragEvent","types","hasFiles","includes","hasContent","Array","from","files","handleIndentAndOutdent","insertTab","indentOrOutdent","alreadyHandled","Set","nodes","i","length","getKey","has","parentBlock","$getNearestBlockElementAncestorOrThrow","parentKey","canInsertTab","add","canIndent","$isTargetWithinDecorator","target","$getNearestNodeFromDOMNode","$isDecoratorNode","$isSelectionAtEndOfRoot","focus","$getRoot","getChildrenSize","registerRichText","removeListener","mergeRegister","registerCommand","CLICK_COMMAND","payload","clear","DELETE_CHARACTER_COMMAND","isBackward","deleteCharacter","COMMAND_PRIORITY_EDITOR","DELETE_WORD_COMMAND","deleteWord","DELETE_LINE_COMMAND","deleteLine","CONTROLLED_TEXT_INSERTION_COMMAND","eventOrText","insertText","data","REMOVE_TEXT_COMMAND","FORMAT_TEXT_COMMAND","formatText","FORMAT_ELEMENT_COMMAND","INSERT_LINE_BREAK_COMMAND","selectStart","insertLineBreak","INSERT_PARAGRAPH_COMMAND","insertParagraph","INDENT_CONTENT_COMMAND","dispatchCommand","block","getIndent","OUTDENT_CONTENT_COMMAND","$isTextNode","textContent","getTextContent","character","KEY_ARROW_UP_COMMAND","selectPrevious","possibleNode","$getAdjacentNode","isIsolated","isInline","$isElementNode","canBeEmpty","select","KEY_ARROW_DOWN_COMMAND","selectNext","KEY_ARROW_LEFT_COMMAND","selection$1","$shouldOverrideDefaultCharacterSelection","isHoldingShift","shiftKey","$moveCharacter","KEY_ARROW_RIGHT_COMMAND","KEY_BACKSPACE_COMMAND","anchorNode","getNode","isCollapsed","$isRootNode","KEY_DELETE_COMMAND","KEY_ENTER_COMMAND","KEY_ESCAPE_COMMAND","blur","DROP_COMMAND","clientX","clientY","eventRange","domOffset","$createRangeSelection","set","getParentOrThrow","getIndexWithinParent","normalizedSelection","$normalizeSelection__EXPERIMENTAL","$setSelection","DRAGSTART_COMMAND","isFileTransfer","DRAGOVER_COMMAND","COPY_COMMAND","CUT_COMMAND","PASTE_COMMAND","hasTextContent","exports"],"sources":["C:/Users/petew/OneDrive/Desktop/Web Dev Reboot/react-boat-info/client/node_modules/@lexical/rich-text/LexicalRichText.dev.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict';\r\n\r\nvar clipboard = require('@lexical/clipboard');\r\nvar selection = require('@lexical/selection');\r\nvar utils = require('@lexical/utils');\r\nvar lexical = require('lexical');\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\nfunction caretFromPoint(x, y) {\r\n  if (typeof document.caretRangeFromPoint !== 'undefined') {\r\n    const range = document.caretRangeFromPoint(x, y);\r\n    if (range === null) {\r\n      return null;\r\n    }\r\n    return {\r\n      node: range.startContainer,\r\n      offset: range.startOffset\r\n    };\r\n    // @ts-ignore\r\n  } else if (document.caretPositionFromPoint !== 'undefined') {\r\n    // @ts-ignore FF - no types\r\n    const range = document.caretPositionFromPoint(x, y);\r\n    if (range === null) {\r\n      return null;\r\n    }\r\n    return {\r\n      node: range.offsetNode,\r\n      offset: range.offset\r\n    };\r\n  } else {\r\n    // Gracefully handle IE\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\r\nCAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\r\nCAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\r\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\r\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\r\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\r\n\r\n// Keep these in case we need to use them in the future.\r\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\r\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\r\n// export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\r\n\r\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\r\n\r\n/** @module @lexical/rich-text */\r\nconst DRAG_DROP_PASTE = lexical.createCommand('DRAG_DROP_PASTE_FILE');\r\n/** @noInheritDoc */\r\nclass QuoteNode extends lexical.ElementNode {\r\n  static getType() {\r\n    return 'quote';\r\n  }\r\n  static clone(node) {\r\n    return new QuoteNode(node.__key);\r\n  }\r\n  constructor(key) {\r\n    super(key);\r\n  }\r\n\r\n  // View\r\n\r\n  createDOM(config) {\r\n    const element = document.createElement('blockquote');\r\n    utils.addClassNamesToElement(element, config.theme.quote);\r\n    return element;\r\n  }\r\n  updateDOM(prevNode, dom) {\r\n    return false;\r\n  }\r\n  static importDOM() {\r\n    return {\r\n      blockquote: node => ({\r\n        conversion: convertBlockquoteElement,\r\n        priority: 0\r\n      })\r\n    };\r\n  }\r\n  static importJSON(serializedNode) {\r\n    const node = $createQuoteNode();\r\n    node.setFormat(serializedNode.format);\r\n    node.setIndent(serializedNode.indent);\r\n    node.setDirection(serializedNode.direction);\r\n    return node;\r\n  }\r\n  exportJSON() {\r\n    return {\r\n      ...super.exportJSON(),\r\n      type: 'quote'\r\n    };\r\n  }\r\n\r\n  // Mutation\r\n\r\n  insertNewAfter(_, restoreSelection) {\r\n    const newBlock = lexical.$createParagraphNode();\r\n    const direction = this.getDirection();\r\n    newBlock.setDirection(direction);\r\n    this.insertAfter(newBlock, restoreSelection);\r\n    return newBlock;\r\n  }\r\n  collapseAtStart() {\r\n    const paragraph = lexical.$createParagraphNode();\r\n    const children = this.getChildren();\r\n    children.forEach(child => paragraph.append(child));\r\n    this.replace(paragraph);\r\n    return true;\r\n  }\r\n}\r\nfunction $createQuoteNode() {\r\n  return lexical.$applyNodeReplacement(new QuoteNode());\r\n}\r\nfunction $isQuoteNode(node) {\r\n  return node instanceof QuoteNode;\r\n}\r\n/** @noInheritDoc */\r\nclass HeadingNode extends lexical.ElementNode {\r\n  /** @internal */\r\n\r\n  static getType() {\r\n    return 'heading';\r\n  }\r\n  static clone(node) {\r\n    return new HeadingNode(node.__tag, node.__key);\r\n  }\r\n  constructor(tag, key) {\r\n    super(key);\r\n    this.__tag = tag;\r\n  }\r\n  getTag() {\r\n    return this.__tag;\r\n  }\r\n\r\n  // View\r\n\r\n  createDOM(config) {\r\n    const tag = this.__tag;\r\n    const element = document.createElement(tag);\r\n    const theme = config.theme;\r\n    const classNames = theme.heading;\r\n    if (classNames !== undefined) {\r\n      const className = classNames[tag];\r\n      utils.addClassNamesToElement(element, className);\r\n    }\r\n    return element;\r\n  }\r\n  updateDOM(prevNode, dom) {\r\n    return false;\r\n  }\r\n  static importDOM() {\r\n    return {\r\n      h1: node => ({\r\n        conversion: convertHeadingElement,\r\n        priority: 0\r\n      }),\r\n      h2: node => ({\r\n        conversion: convertHeadingElement,\r\n        priority: 0\r\n      }),\r\n      h3: node => ({\r\n        conversion: convertHeadingElement,\r\n        priority: 0\r\n      }),\r\n      h4: node => ({\r\n        conversion: convertHeadingElement,\r\n        priority: 0\r\n      }),\r\n      h5: node => ({\r\n        conversion: convertHeadingElement,\r\n        priority: 0\r\n      }),\r\n      h6: node => ({\r\n        conversion: convertHeadingElement,\r\n        priority: 0\r\n      }),\r\n      p: node => {\r\n        // domNode is a <p> since we matched it by nodeName\r\n        const paragraph = node;\r\n        const firstChild = paragraph.firstChild;\r\n        if (firstChild !== null && isGoogleDocsTitle(firstChild)) {\r\n          return {\r\n            conversion: () => ({\r\n              node: null\r\n            }),\r\n            priority: 3\r\n          };\r\n        }\r\n        return null;\r\n      },\r\n      span: node => {\r\n        if (isGoogleDocsTitle(node)) {\r\n          return {\r\n            conversion: domNode => {\r\n              return {\r\n                node: $createHeadingNode('h1')\r\n              };\r\n            },\r\n            priority: 3\r\n          };\r\n        }\r\n        return null;\r\n      }\r\n    };\r\n  }\r\n  static importJSON(serializedNode) {\r\n    const node = $createHeadingNode(serializedNode.tag);\r\n    node.setFormat(serializedNode.format);\r\n    node.setIndent(serializedNode.indent);\r\n    node.setDirection(serializedNode.direction);\r\n    return node;\r\n  }\r\n  exportJSON() {\r\n    return {\r\n      ...super.exportJSON(),\r\n      tag: this.getTag(),\r\n      type: 'heading',\r\n      version: 1\r\n    };\r\n  }\r\n\r\n  // Mutation\r\n  insertNewAfter(selection, restoreSelection = true) {\r\n    const anchorOffet = selection ? selection.anchor.offset : 0;\r\n    const newElement = anchorOffet > 0 && anchorOffet < this.getTextContentSize() ? $createHeadingNode(this.getTag()) : lexical.$createParagraphNode();\r\n    const direction = this.getDirection();\r\n    newElement.setDirection(direction);\r\n    this.insertAfter(newElement, restoreSelection);\r\n    return newElement;\r\n  }\r\n  collapseAtStart() {\r\n    const newElement = !this.isEmpty() ? $createHeadingNode(this.getTag()) : lexical.$createParagraphNode();\r\n    const children = this.getChildren();\r\n    children.forEach(child => newElement.append(child));\r\n    this.replace(newElement);\r\n    return true;\r\n  }\r\n  extractWithChild() {\r\n    return true;\r\n  }\r\n}\r\nfunction isGoogleDocsTitle(domNode) {\r\n  if (domNode.nodeName.toLowerCase() === 'span') {\r\n    return domNode.style.fontSize === '26pt';\r\n  }\r\n  return false;\r\n}\r\nfunction convertHeadingElement(domNode) {\r\n  const nodeName = domNode.nodeName.toLowerCase();\r\n  let node = null;\r\n  if (nodeName === 'h1' || nodeName === 'h2' || nodeName === 'h3' || nodeName === 'h4' || nodeName === 'h5' || nodeName === 'h6') {\r\n    node = $createHeadingNode(nodeName);\r\n  }\r\n  return {\r\n    node\r\n  };\r\n}\r\nfunction convertBlockquoteElement() {\r\n  const node = $createQuoteNode();\r\n  return {\r\n    node\r\n  };\r\n}\r\nfunction $createHeadingNode(headingTag) {\r\n  return lexical.$applyNodeReplacement(new HeadingNode(headingTag));\r\n}\r\nfunction $isHeadingNode(node) {\r\n  return node instanceof HeadingNode;\r\n}\r\nfunction onPasteForRichText(event, editor) {\r\n  event.preventDefault();\r\n  editor.update(() => {\r\n    const selection = lexical.$getSelection();\r\n    const clipboardData = event instanceof InputEvent || event instanceof KeyboardEvent ? null : event.clipboardData;\r\n    if (clipboardData != null && (lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection))) {\r\n      clipboard.$insertDataTransferForRichText(clipboardData, selection, editor);\r\n    }\r\n  }, {\r\n    tag: 'paste'\r\n  });\r\n}\r\nasync function onCutForRichText(event, editor) {\r\n  await clipboard.copyToClipboard__EXPERIMENTAL(editor, event instanceof ClipboardEvent ? event : null);\r\n  editor.update(() => {\r\n    const selection = lexical.$getSelection();\r\n    if (lexical.$isRangeSelection(selection)) {\r\n      selection.removeText();\r\n    } else if (lexical.$isNodeSelection(selection)) {\r\n      selection.getNodes().forEach(node => node.remove());\r\n    }\r\n  });\r\n}\r\n\r\n// Clipboard may contain files that we aren't allowed to read. While the event is arguably useless,\r\n// in certain ocassions, we want to know whether it was a file transfer, as opposed to text. We\r\n// control this with the first boolean flag.\r\nfunction eventFiles(event) {\r\n  let dataTransfer = null;\r\n  if (event instanceof DragEvent) {\r\n    dataTransfer = event.dataTransfer;\r\n  } else if (event instanceof ClipboardEvent) {\r\n    dataTransfer = event.clipboardData;\r\n  }\r\n  if (dataTransfer === null) {\r\n    return [false, [], false];\r\n  }\r\n  const types = dataTransfer.types;\r\n  const hasFiles = types.includes('Files');\r\n  const hasContent = types.includes('text/html') || types.includes('text/plain');\r\n  return [hasFiles, Array.from(dataTransfer.files), hasContent];\r\n}\r\nfunction handleIndentAndOutdent(insertTab, indentOrOutdent) {\r\n  const selection = lexical.$getSelection();\r\n  if (!lexical.$isRangeSelection(selection)) {\r\n    return;\r\n  }\r\n  const alreadyHandled = new Set();\r\n  const nodes = selection.getNodes();\r\n  for (let i = 0; i < nodes.length; i++) {\r\n    const node = nodes[i];\r\n    const key = node.getKey();\r\n    if (alreadyHandled.has(key)) {\r\n      continue;\r\n    }\r\n    const parentBlock = utils.$getNearestBlockElementAncestorOrThrow(node);\r\n    const parentKey = parentBlock.getKey();\r\n    if (parentBlock.canInsertTab()) {\r\n      insertTab(node);\r\n      alreadyHandled.add(key);\r\n    } else if (parentBlock.canIndent() && !alreadyHandled.has(parentKey)) {\r\n      alreadyHandled.add(parentKey);\r\n      indentOrOutdent(parentBlock);\r\n    }\r\n  }\r\n}\r\nfunction $isTargetWithinDecorator(target) {\r\n  const node = lexical.$getNearestNodeFromDOMNode(target);\r\n  return lexical.$isDecoratorNode(node);\r\n}\r\nfunction $isSelectionAtEndOfRoot(selection) {\r\n  const focus = selection.focus;\r\n  return focus.key === 'root' && focus.offset === lexical.$getRoot().getChildrenSize();\r\n}\r\nfunction registerRichText(editor) {\r\n  const removeListener = utils.mergeRegister(editor.registerCommand(lexical.CLICK_COMMAND, payload => {\r\n    const selection = lexical.$getSelection();\r\n    if (lexical.$isNodeSelection(selection)) {\r\n      selection.clear();\r\n      return true;\r\n    }\r\n    return false;\r\n  }, 0), editor.registerCommand(lexical.DELETE_CHARACTER_COMMAND, isBackward => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.deleteCharacter(isBackward);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_WORD_COMMAND, isBackward => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.deleteWord(isBackward);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_LINE_COMMAND, isBackward => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.deleteLine(isBackward);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, eventOrText => {\r\n    const selection = lexical.$getSelection();\r\n    if (typeof eventOrText === 'string') {\r\n      if (lexical.$isRangeSelection(selection)) {\r\n        selection.insertText(eventOrText);\r\n      } else if (lexical.DEPRECATED_$isGridSelection(selection)) ;\r\n    } else {\r\n      if (!lexical.$isRangeSelection(selection) && !lexical.DEPRECATED_$isGridSelection(selection)) {\r\n        return false;\r\n      }\r\n      const dataTransfer = eventOrText.dataTransfer;\r\n      if (dataTransfer != null) {\r\n        clipboard.$insertDataTransferForRichText(dataTransfer, selection, editor);\r\n      } else if (lexical.$isRangeSelection(selection)) {\r\n        const data = eventOrText.data;\r\n        if (data) {\r\n          selection.insertText(data);\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.REMOVE_TEXT_COMMAND, () => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.removeText();\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.FORMAT_TEXT_COMMAND, format => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.formatText(format);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.FORMAT_ELEMENT_COMMAND, format => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection) && !lexical.$isNodeSelection(selection)) {\r\n      return false;\r\n    }\r\n    const nodes = selection.getNodes();\r\n    for (const node of nodes) {\r\n      const element = utils.$getNearestBlockElementAncestorOrThrow(node);\r\n      element.setFormat(format);\r\n    }\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_LINE_BREAK_COMMAND, selectStart => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.insertLineBreak(selectStart);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_PARAGRAPH_COMMAND, () => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.insertParagraph();\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INDENT_CONTENT_COMMAND, () => {\r\n    handleIndentAndOutdent(() => {\r\n      editor.dispatchCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, '\\t');\r\n    }, block => {\r\n      const indent = block.getIndent();\r\n      if (indent !== 10) {\r\n        block.setIndent(indent + 1);\r\n      }\r\n    });\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.OUTDENT_CONTENT_COMMAND, () => {\r\n    handleIndentAndOutdent(node => {\r\n      if (lexical.$isTextNode(node)) {\r\n        const textContent = node.getTextContent();\r\n        const character = textContent[textContent.length - 1];\r\n        if (character === '\\t') {\r\n          editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, true);\r\n        }\r\n      }\r\n    }, block => {\r\n      const indent = block.getIndent();\r\n      if (indent !== 0) {\r\n        block.setIndent(indent - 1);\r\n      }\r\n    });\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, event => {\r\n    const selection = lexical.$getSelection();\r\n    if (lexical.$isNodeSelection(selection) && !$isTargetWithinDecorator(event.target)) {\r\n      // If selection is on a node, let's try and move selection\r\n      // back to being a range selection.\r\n      const nodes = selection.getNodes();\r\n      if (nodes.length > 0) {\r\n        nodes[0].selectPrevious();\r\n        return true;\r\n      }\r\n    } else if (lexical.$isRangeSelection(selection)) {\r\n      const possibleNode = lexical.$getAdjacentNode(selection.focus, true);\r\n      if (lexical.$isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\r\n        possibleNode.selectPrevious();\r\n        event.preventDefault();\r\n        return true;\r\n      } else if (lexical.$isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\r\n        possibleNode.select();\r\n        event.preventDefault();\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, event => {\r\n    const selection = lexical.$getSelection();\r\n    if (lexical.$isNodeSelection(selection)) {\r\n      // If selection is on a node, let's try and move selection\r\n      // back to being a range selection.\r\n      const nodes = selection.getNodes();\r\n      if (nodes.length > 0) {\r\n        nodes[0].selectNext(0, 0);\r\n        return true;\r\n      }\r\n    } else if (lexical.$isRangeSelection(selection)) {\r\n      if ($isSelectionAtEndOfRoot(selection)) {\r\n        event.preventDefault();\r\n        return true;\r\n      }\r\n      const possibleNode = lexical.$getAdjacentNode(selection.focus, false);\r\n      if (lexical.$isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\r\n        possibleNode.selectNext();\r\n        event.preventDefault();\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, event => {\r\n    const selection$1 = lexical.$getSelection();\r\n    if (lexical.$isNodeSelection(selection$1)) {\r\n      // If selection is on a node, let's try and move selection\r\n      // back to being a range selection.\r\n      const nodes = selection$1.getNodes();\r\n      if (nodes.length > 0) {\r\n        event.preventDefault();\r\n        nodes[0].selectPrevious();\r\n        return true;\r\n      }\r\n    }\r\n    if (!lexical.$isRangeSelection(selection$1)) {\r\n      return false;\r\n    }\r\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, true)) {\r\n      const isHoldingShift = event.shiftKey;\r\n      event.preventDefault();\r\n      selection.$moveCharacter(selection$1, isHoldingShift, true);\r\n      return true;\r\n    }\r\n    return false;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_RIGHT_COMMAND, event => {\r\n    const selection$1 = lexical.$getSelection();\r\n    if (lexical.$isNodeSelection(selection$1) && !$isTargetWithinDecorator(event.target)) {\r\n      // If selection is on a node, let's try and move selection\r\n      // back to being a range selection.\r\n      const nodes = selection$1.getNodes();\r\n      if (nodes.length > 0) {\r\n        event.preventDefault();\r\n        nodes[0].selectNext(0, 0);\r\n        return true;\r\n      }\r\n    }\r\n    if (!lexical.$isRangeSelection(selection$1)) {\r\n      return false;\r\n    }\r\n    const isHoldingShift = event.shiftKey;\r\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, false)) {\r\n      event.preventDefault();\r\n      selection.$moveCharacter(selection$1, isHoldingShift, false);\r\n      return true;\r\n    }\r\n    return false;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, event => {\r\n    if ($isTargetWithinDecorator(event.target)) {\r\n      return false;\r\n    }\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    event.preventDefault();\r\n    const {\r\n      anchor\r\n    } = selection;\r\n    const anchorNode = anchor.getNode();\r\n    if (selection.isCollapsed() && anchor.offset === 0 && !lexical.$isRootNode(anchorNode)) {\r\n      const element = utils.$getNearestBlockElementAncestorOrThrow(anchorNode);\r\n      if (element.getIndent() > 0) {\r\n        return editor.dispatchCommand(lexical.OUTDENT_CONTENT_COMMAND, undefined);\r\n      }\r\n    }\r\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, true);\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_DELETE_COMMAND, event => {\r\n    if ($isTargetWithinDecorator(event.target)) {\r\n      return false;\r\n    }\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    event.preventDefault();\r\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, false);\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ENTER_COMMAND, event => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    if (event !== null) {\r\n      // If we have beforeinput, then we can avoid blocking\r\n      // the default behavior. This ensures that the iOS can\r\n      // intercept that we're actually inserting a paragraph,\r\n      // and autocomplete, autocapitalize etc work as intended.\r\n      // This can also cause a strange performance issue in\r\n      // Safari, where there is a noticeable pause due to\r\n      // preventing the key down of enter.\r\n      if ((IS_IOS || IS_SAFARI || IS_APPLE_WEBKIT) && CAN_USE_BEFORE_INPUT) {\r\n        return false;\r\n      }\r\n      event.preventDefault();\r\n      if (event.shiftKey) {\r\n        return editor.dispatchCommand(lexical.INSERT_LINE_BREAK_COMMAND, false);\r\n      }\r\n    }\r\n    return editor.dispatchCommand(lexical.INSERT_PARAGRAPH_COMMAND, undefined);\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ESCAPE_COMMAND, () => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    editor.blur();\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DROP_COMMAND, event => {\r\n    const [, files] = eventFiles(event);\r\n    if (files.length > 0) {\r\n      const x = event.clientX;\r\n      const y = event.clientY;\r\n      const eventRange = caretFromPoint(x, y);\r\n      if (eventRange !== null) {\r\n        const {\r\n          offset: domOffset,\r\n          node: domNode\r\n        } = eventRange;\r\n        const node = lexical.$getNearestNodeFromDOMNode(domNode);\r\n        if (node !== null) {\r\n          const selection = lexical.$createRangeSelection();\r\n          if (lexical.$isTextNode(node)) {\r\n            selection.anchor.set(node.getKey(), domOffset, 'text');\r\n            selection.focus.set(node.getKey(), domOffset, 'text');\r\n          } else {\r\n            const parentKey = node.getParentOrThrow().getKey();\r\n            const offset = node.getIndexWithinParent() + 1;\r\n            selection.anchor.set(parentKey, offset, 'element');\r\n            selection.focus.set(parentKey, offset, 'element');\r\n          }\r\n          const normalizedSelection = lexical.$normalizeSelection__EXPERIMENTAL(selection);\r\n          lexical.$setSelection(normalizedSelection);\r\n        }\r\n        editor.dispatchCommand(DRAG_DROP_PASTE, files);\r\n      }\r\n      event.preventDefault();\r\n      return true;\r\n    }\r\n    const selection = lexical.$getSelection();\r\n    if (lexical.$isRangeSelection(selection)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DRAGSTART_COMMAND, event => {\r\n    const [isFileTransfer] = eventFiles(event);\r\n    const selection = lexical.$getSelection();\r\n    if (isFileTransfer && !lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DRAGOVER_COMMAND, event => {\r\n    const [isFileTransfer] = eventFiles(event);\r\n    const selection = lexical.$getSelection();\r\n    if (isFileTransfer && !lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    const x = event.clientX;\r\n    const y = event.clientY;\r\n    const eventRange = caretFromPoint(x, y);\r\n    if (eventRange !== null) {\r\n      const node = lexical.$getNearestNodeFromDOMNode(eventRange.node);\r\n      if (lexical.$isDecoratorNode(node)) {\r\n        // Show browser caret as the user is dragging the media across the screen. Won't work\r\n        // for DecoratorNode nor it's relevant.\r\n        event.preventDefault();\r\n      }\r\n    }\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.COPY_COMMAND, event => {\r\n    clipboard.copyToClipboard__EXPERIMENTAL(editor, event instanceof ClipboardEvent ? event : null);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CUT_COMMAND, event => {\r\n    onCutForRichText(event, editor);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.PASTE_COMMAND, event => {\r\n    const [, files, hasTextContent] = eventFiles(event);\r\n    if (files.length > 0 && !hasTextContent) {\r\n      editor.dispatchCommand(DRAG_DROP_PASTE, files);\r\n      return true;\r\n    }\r\n    const selection = lexical.$getSelection();\r\n    if (lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection)) {\r\n      onPasteForRichText(event, editor);\r\n      return true;\r\n    }\r\n    return false;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR));\r\n  return removeListener;\r\n}\r\n\r\nexports.$createHeadingNode = $createHeadingNode;\r\nexports.$createQuoteNode = $createQuoteNode;\r\nexports.$isHeadingNode = $isHeadingNode;\r\nexports.$isQuoteNode = $isQuoteNode;\r\nexports.DRAG_DROP_PASTE = DRAG_DROP_PASTE;\r\nexports.HeadingNode = HeadingNode;\r\nexports.QuoteNode = QuoteNode;\r\nexports.eventFiles = eventFiles;\r\nexports.registerRichText = registerRichText;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC7C,IAAIC,SAAS,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC7C,IAAIE,KAAK,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AACrC,IAAIG,OAAO,GAAGH,OAAO,CAAC,SAAS,CAAC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASI,cAAc,CAACC,CAAC,EAAEC,CAAC,EAAE;EAC5B,IAAI,OAAOC,QAAQ,CAACC,mBAAmB,KAAK,WAAW,EAAE;IACvD,MAAMC,KAAK,GAAGF,QAAQ,CAACC,mBAAmB,CAACH,CAAC,EAAEC,CAAC,CAAC;IAChD,IAAIG,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAI;IACb;IACA,OAAO;MACLC,IAAI,EAAED,KAAK,CAACE,cAAc;MAC1BC,MAAM,EAAEH,KAAK,CAACI;IAChB,CAAC;IACD;EACF,CAAC,MAAM,IAAIN,QAAQ,CAACO,sBAAsB,KAAK,WAAW,EAAE;IAC1D;IACA,MAAML,KAAK,GAAGF,QAAQ,CAACO,sBAAsB,CAACT,CAAC,EAAEC,CAAC,CAAC;IACnD,IAAIG,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAI;IACb;IACA,OAAO;MACLC,IAAI,EAAED,KAAK,CAACM,UAAU;MACtBH,MAAM,EAAEH,KAAK,CAACG;IAChB,CAAC;EACH,CAAC,MAAM;IACL;IACA,OAAO,IAAI;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,WAAW,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACV,QAAQ,KAAK,WAAW,IAAI,OAAOU,MAAM,CAACV,QAAQ,CAACW,aAAa,KAAK,WAAW;;AAEnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAGH,WAAW,IAAI,cAAc,IAAIT,QAAQ,GAAGA,QAAQ,CAACY,YAAY,GAAG,IAAI;AAC7FH,WAAW,IAAI,sBAAsB,CAACI,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC;AAC9DN,WAAW,IAAI,kCAAkC,CAACI,IAAI,CAACC,SAAS,CAACE,SAAS,CAAC;AAC3E,MAAMC,oBAAoB,GAAGR,WAAW,IAAI,YAAY,IAAIC,MAAM,IAAI,CAACE,YAAY,GAAG,iBAAiB,IAAI,IAAIF,MAAM,CAACQ,UAAU,CAAC,OAAO,CAAC,GAAG,KAAK;AACjJ,MAAMC,SAAS,GAAGV,WAAW,IAAI,yBAAyB,CAACI,IAAI,CAACC,SAAS,CAACE,SAAS,CAAC;AACpF,MAAMI,MAAM,GAAGX,WAAW,IAAI,kBAAkB,CAACI,IAAI,CAACC,SAAS,CAACE,SAAS,CAAC,IAAI,CAACN,MAAM,CAACW,QAAQ;;AAE9F;AACA;AACA,MAAMC,SAAS,GAAGb,WAAW,IAAI,kBAAkB,CAACI,IAAI,CAACC,SAAS,CAACE,SAAS,CAAC;AAC7E;;AAEA,MAAMO,eAAe,GAAGd,WAAW,IAAI,qBAAqB,CAACI,IAAI,CAACC,SAAS,CAACE,SAAS,CAAC,IAAI,CAACM,SAAS;;AAEpG;AACA,MAAME,eAAe,GAAG5B,OAAO,CAAC6B,aAAa,CAAC,sBAAsB,CAAC;AACrE;AACA,MAAMC,SAAS,SAAS9B,OAAO,CAAC+B,WAAW,CAAC;EAC1C,OAAOC,OAAO,GAAG;IACf,OAAO,OAAO;EAChB;EACA,OAAOC,KAAK,CAAC1B,IAAI,EAAE;IACjB,OAAO,IAAIuB,SAAS,CAACvB,IAAI,CAAC2B,KAAK,CAAC;EAClC;EACAC,WAAW,CAACC,GAAG,EAAE;IACf,KAAK,CAACA,GAAG,CAAC;EACZ;;EAEA;;EAEAC,SAAS,CAACC,MAAM,EAAE;IAChB,MAAMC,OAAO,GAAGnC,QAAQ,CAACW,aAAa,CAAC,YAAY,CAAC;IACpDhB,KAAK,CAACyC,sBAAsB,CAACD,OAAO,EAAED,MAAM,CAACG,KAAK,CAACC,KAAK,CAAC;IACzD,OAAOH,OAAO;EAChB;EACAI,SAAS,CAACC,QAAQ,EAAEC,GAAG,EAAE;IACvB,OAAO,KAAK;EACd;EACA,OAAOC,SAAS,GAAG;IACjB,OAAO;MACLC,UAAU,EAAExC,IAAI,KAAK;QACnByC,UAAU,EAAEC,wBAAwB;QACpCC,QAAQ,EAAE;MACZ,CAAC;IACH,CAAC;EACH;EACA,OAAOC,UAAU,CAACC,cAAc,EAAE;IAChC,MAAM7C,IAAI,GAAG8C,gBAAgB,EAAE;IAC/B9C,IAAI,CAAC+C,SAAS,CAACF,cAAc,CAACG,MAAM,CAAC;IACrChD,IAAI,CAACiD,SAAS,CAACJ,cAAc,CAACK,MAAM,CAAC;IACrClD,IAAI,CAACmD,YAAY,CAACN,cAAc,CAACO,SAAS,CAAC;IAC3C,OAAOpD,IAAI;EACb;EACAqD,UAAU,GAAG;IACX,OAAO;MACL,GAAG,KAAK,CAACA,UAAU,EAAE;MACrBC,IAAI,EAAE;IACR,CAAC;EACH;;EAEA;;EAEAC,cAAc,CAACC,CAAC,EAAEC,gBAAgB,EAAE;IAClC,MAAMC,QAAQ,GAAGjE,OAAO,CAACkE,oBAAoB,EAAE;IAC/C,MAAMP,SAAS,GAAG,IAAI,CAACQ,YAAY,EAAE;IACrCF,QAAQ,CAACP,YAAY,CAACC,SAAS,CAAC;IAChC,IAAI,CAACS,WAAW,CAACH,QAAQ,EAAED,gBAAgB,CAAC;IAC5C,OAAOC,QAAQ;EACjB;EACAI,eAAe,GAAG;IAChB,MAAMC,SAAS,GAAGtE,OAAO,CAACkE,oBAAoB,EAAE;IAChD,MAAMK,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE;IACnCD,QAAQ,CAACE,OAAO,CAACC,KAAK,IAAIJ,SAAS,CAACK,MAAM,CAACD,KAAK,CAAC,CAAC;IAClD,IAAI,CAACE,OAAO,CAACN,SAAS,CAAC;IACvB,OAAO,IAAI;EACb;AACF;AACA,SAASjB,gBAAgB,GAAG;EAC1B,OAAOrD,OAAO,CAAC6E,qBAAqB,CAAC,IAAI/C,SAAS,EAAE,CAAC;AACvD;AACA,SAASgD,YAAY,CAACvE,IAAI,EAAE;EAC1B,OAAOA,IAAI,YAAYuB,SAAS;AAClC;AACA;AACA,MAAMiD,WAAW,SAAS/E,OAAO,CAAC+B,WAAW,CAAC;EAC5C;;EAEA,OAAOC,OAAO,GAAG;IACf,OAAO,SAAS;EAClB;EACA,OAAOC,KAAK,CAAC1B,IAAI,EAAE;IACjB,OAAO,IAAIwE,WAAW,CAACxE,IAAI,CAACyE,KAAK,EAAEzE,IAAI,CAAC2B,KAAK,CAAC;EAChD;EACAC,WAAW,CAAC8C,GAAG,EAAE7C,GAAG,EAAE;IACpB,KAAK,CAACA,GAAG,CAAC;IACV,IAAI,CAAC4C,KAAK,GAAGC,GAAG;EAClB;EACAC,MAAM,GAAG;IACP,OAAO,IAAI,CAACF,KAAK;EACnB;;EAEA;;EAEA3C,SAAS,CAACC,MAAM,EAAE;IAChB,MAAM2C,GAAG,GAAG,IAAI,CAACD,KAAK;IACtB,MAAMzC,OAAO,GAAGnC,QAAQ,CAACW,aAAa,CAACkE,GAAG,CAAC;IAC3C,MAAMxC,KAAK,GAAGH,MAAM,CAACG,KAAK;IAC1B,MAAM0C,UAAU,GAAG1C,KAAK,CAAC2C,OAAO;IAChC,IAAID,UAAU,KAAKE,SAAS,EAAE;MAC5B,MAAMC,SAAS,GAAGH,UAAU,CAACF,GAAG,CAAC;MACjClF,KAAK,CAACyC,sBAAsB,CAACD,OAAO,EAAE+C,SAAS,CAAC;IAClD;IACA,OAAO/C,OAAO;EAChB;EACAI,SAAS,CAACC,QAAQ,EAAEC,GAAG,EAAE;IACvB,OAAO,KAAK;EACd;EACA,OAAOC,SAAS,GAAG;IACjB,OAAO;MACLyC,EAAE,EAAEhF,IAAI,KAAK;QACXyC,UAAU,EAAEwC,qBAAqB;QACjCtC,QAAQ,EAAE;MACZ,CAAC,CAAC;MACFuC,EAAE,EAAElF,IAAI,KAAK;QACXyC,UAAU,EAAEwC,qBAAqB;QACjCtC,QAAQ,EAAE;MACZ,CAAC,CAAC;MACFwC,EAAE,EAAEnF,IAAI,KAAK;QACXyC,UAAU,EAAEwC,qBAAqB;QACjCtC,QAAQ,EAAE;MACZ,CAAC,CAAC;MACFyC,EAAE,EAAEpF,IAAI,KAAK;QACXyC,UAAU,EAAEwC,qBAAqB;QACjCtC,QAAQ,EAAE;MACZ,CAAC,CAAC;MACF0C,EAAE,EAAErF,IAAI,KAAK;QACXyC,UAAU,EAAEwC,qBAAqB;QACjCtC,QAAQ,EAAE;MACZ,CAAC,CAAC;MACF2C,EAAE,EAAEtF,IAAI,KAAK;QACXyC,UAAU,EAAEwC,qBAAqB;QACjCtC,QAAQ,EAAE;MACZ,CAAC,CAAC;MACF4C,CAAC,EAAEvF,IAAI,IAAI;QACT;QACA,MAAM+D,SAAS,GAAG/D,IAAI;QACtB,MAAMwF,UAAU,GAAGzB,SAAS,CAACyB,UAAU;QACvC,IAAIA,UAAU,KAAK,IAAI,IAAIC,iBAAiB,CAACD,UAAU,CAAC,EAAE;UACxD,OAAO;YACL/C,UAAU,EAAE,OAAO;cACjBzC,IAAI,EAAE;YACR,CAAC,CAAC;YACF2C,QAAQ,EAAE;UACZ,CAAC;QACH;QACA,OAAO,IAAI;MACb,CAAC;MACD+C,IAAI,EAAE1F,IAAI,IAAI;QACZ,IAAIyF,iBAAiB,CAACzF,IAAI,CAAC,EAAE;UAC3B,OAAO;YACLyC,UAAU,EAAEkD,OAAO,IAAI;cACrB,OAAO;gBACL3F,IAAI,EAAE4F,kBAAkB,CAAC,IAAI;cAC/B,CAAC;YACH,CAAC;YACDjD,QAAQ,EAAE;UACZ,CAAC;QACH;QACA,OAAO,IAAI;MACb;IACF,CAAC;EACH;EACA,OAAOC,UAAU,CAACC,cAAc,EAAE;IAChC,MAAM7C,IAAI,GAAG4F,kBAAkB,CAAC/C,cAAc,CAAC6B,GAAG,CAAC;IACnD1E,IAAI,CAAC+C,SAAS,CAACF,cAAc,CAACG,MAAM,CAAC;IACrChD,IAAI,CAACiD,SAAS,CAACJ,cAAc,CAACK,MAAM,CAAC;IACrClD,IAAI,CAACmD,YAAY,CAACN,cAAc,CAACO,SAAS,CAAC;IAC3C,OAAOpD,IAAI;EACb;EACAqD,UAAU,GAAG;IACX,OAAO;MACL,GAAG,KAAK,CAACA,UAAU,EAAE;MACrBqB,GAAG,EAAE,IAAI,CAACC,MAAM,EAAE;MAClBrB,IAAI,EAAE,SAAS;MACfuC,OAAO,EAAE;IACX,CAAC;EACH;;EAEA;EACAtC,cAAc,CAAChE,SAAS,EAA2B;IAAA,IAAzBkE,gBAAgB,uEAAG,IAAI;IAC/C,MAAMqC,WAAW,GAAGvG,SAAS,GAAGA,SAAS,CAACwG,MAAM,CAAC7F,MAAM,GAAG,CAAC;IAC3D,MAAM8F,UAAU,GAAGF,WAAW,GAAG,CAAC,IAAIA,WAAW,GAAG,IAAI,CAACG,kBAAkB,EAAE,GAAGL,kBAAkB,CAAC,IAAI,CAACjB,MAAM,EAAE,CAAC,GAAGlF,OAAO,CAACkE,oBAAoB,EAAE;IAClJ,MAAMP,SAAS,GAAG,IAAI,CAACQ,YAAY,EAAE;IACrCoC,UAAU,CAAC7C,YAAY,CAACC,SAAS,CAAC;IAClC,IAAI,CAACS,WAAW,CAACmC,UAAU,EAAEvC,gBAAgB,CAAC;IAC9C,OAAOuC,UAAU;EACnB;EACAlC,eAAe,GAAG;IAChB,MAAMkC,UAAU,GAAG,CAAC,IAAI,CAACE,OAAO,EAAE,GAAGN,kBAAkB,CAAC,IAAI,CAACjB,MAAM,EAAE,CAAC,GAAGlF,OAAO,CAACkE,oBAAoB,EAAE;IACvG,MAAMK,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE;IACnCD,QAAQ,CAACE,OAAO,CAACC,KAAK,IAAI6B,UAAU,CAAC5B,MAAM,CAACD,KAAK,CAAC,CAAC;IACnD,IAAI,CAACE,OAAO,CAAC2B,UAAU,CAAC;IACxB,OAAO,IAAI;EACb;EACAG,gBAAgB,GAAG;IACjB,OAAO,IAAI;EACb;AACF;AACA,SAASV,iBAAiB,CAACE,OAAO,EAAE;EAClC,IAAIA,OAAO,CAACS,QAAQ,CAACC,WAAW,EAAE,KAAK,MAAM,EAAE;IAC7C,OAAOV,OAAO,CAACW,KAAK,CAACC,QAAQ,KAAK,MAAM;EAC1C;EACA,OAAO,KAAK;AACd;AACA,SAAStB,qBAAqB,CAACU,OAAO,EAAE;EACtC,MAAMS,QAAQ,GAAGT,OAAO,CAACS,QAAQ,CAACC,WAAW,EAAE;EAC/C,IAAIrG,IAAI,GAAG,IAAI;EACf,IAAIoG,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,IAAI,EAAE;IAC9HpG,IAAI,GAAG4F,kBAAkB,CAACQ,QAAQ,CAAC;EACrC;EACA,OAAO;IACLpG;EACF,CAAC;AACH;AACA,SAAS0C,wBAAwB,GAAG;EAClC,MAAM1C,IAAI,GAAG8C,gBAAgB,EAAE;EAC/B,OAAO;IACL9C;EACF,CAAC;AACH;AACA,SAAS4F,kBAAkB,CAACY,UAAU,EAAE;EACtC,OAAO/G,OAAO,CAAC6E,qBAAqB,CAAC,IAAIE,WAAW,CAACgC,UAAU,CAAC,CAAC;AACnE;AACA,SAASC,cAAc,CAACzG,IAAI,EAAE;EAC5B,OAAOA,IAAI,YAAYwE,WAAW;AACpC;AACA,SAASkC,kBAAkB,CAACC,KAAK,EAAEC,MAAM,EAAE;EACzCD,KAAK,CAACE,cAAc,EAAE;EACtBD,MAAM,CAACE,MAAM,CAAC,MAAM;IAClB,MAAMvH,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,MAAMC,aAAa,GAAGL,KAAK,YAAY5F,UAAU,IAAI4F,KAAK,YAAYM,aAAa,GAAG,IAAI,GAAGN,KAAK,CAACK,aAAa;IAChH,IAAIA,aAAa,IAAI,IAAI,KAAKvH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,IAAIE,OAAO,CAAC0H,2BAA2B,CAAC5H,SAAS,CAAC,CAAC,EAAE;MACrHF,SAAS,CAAC+H,8BAA8B,CAACJ,aAAa,EAAEzH,SAAS,EAAEqH,MAAM,CAAC;IAC5E;EACF,CAAC,EAAE;IACDlC,GAAG,EAAE;EACP,CAAC,CAAC;AACJ;AACA,eAAe2C,gBAAgB,CAACV,KAAK,EAAEC,MAAM,EAAE;EAC7C,MAAMvH,SAAS,CAACiI,6BAA6B,CAACV,MAAM,EAAED,KAAK,YAAYY,cAAc,GAAGZ,KAAK,GAAG,IAAI,CAAC;EACrGC,MAAM,CAACE,MAAM,CAAC,MAAM;IAClB,MAAMvH,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAItH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MACxCA,SAAS,CAACiI,UAAU,EAAE;IACxB,CAAC,MAAM,IAAI/H,OAAO,CAACgI,gBAAgB,CAAClI,SAAS,CAAC,EAAE;MAC9CA,SAAS,CAACmI,QAAQ,EAAE,CAACxD,OAAO,CAAClE,IAAI,IAAIA,IAAI,CAAC2H,MAAM,EAAE,CAAC;IACrD;EACF,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA,SAASC,UAAU,CAACjB,KAAK,EAAE;EACzB,IAAIkB,YAAY,GAAG,IAAI;EACvB,IAAIlB,KAAK,YAAYmB,SAAS,EAAE;IAC9BD,YAAY,GAAGlB,KAAK,CAACkB,YAAY;EACnC,CAAC,MAAM,IAAIlB,KAAK,YAAYY,cAAc,EAAE;IAC1CM,YAAY,GAAGlB,KAAK,CAACK,aAAa;EACpC;EACA,IAAIa,YAAY,KAAK,IAAI,EAAE;IACzB,OAAO,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC;EAC3B;EACA,MAAME,KAAK,GAAGF,YAAY,CAACE,KAAK;EAChC,MAAMC,QAAQ,GAAGD,KAAK,CAACE,QAAQ,CAAC,OAAO,CAAC;EACxC,MAAMC,UAAU,GAAGH,KAAK,CAACE,QAAQ,CAAC,WAAW,CAAC,IAAIF,KAAK,CAACE,QAAQ,CAAC,YAAY,CAAC;EAC9E,OAAO,CAACD,QAAQ,EAAEG,KAAK,CAACC,IAAI,CAACP,YAAY,CAACQ,KAAK,CAAC,EAAEH,UAAU,CAAC;AAC/D;AACA,SAASI,sBAAsB,CAACC,SAAS,EAAEC,eAAe,EAAE;EAC1D,MAAMjJ,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;EACzC,IAAI,CAACtH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;IACzC;EACF;EACA,MAAMkJ,cAAc,GAAG,IAAIC,GAAG,EAAE;EAChC,MAAMC,KAAK,GAAGpJ,SAAS,CAACmI,QAAQ,EAAE;EAClC,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,MAAM5I,IAAI,GAAG2I,KAAK,CAACC,CAAC,CAAC;IACrB,MAAM/G,GAAG,GAAG7B,IAAI,CAAC8I,MAAM,EAAE;IACzB,IAAIL,cAAc,CAACM,GAAG,CAAClH,GAAG,CAAC,EAAE;MAC3B;IACF;IACA,MAAMmH,WAAW,GAAGxJ,KAAK,CAACyJ,sCAAsC,CAACjJ,IAAI,CAAC;IACtE,MAAMkJ,SAAS,GAAGF,WAAW,CAACF,MAAM,EAAE;IACtC,IAAIE,WAAW,CAACG,YAAY,EAAE,EAAE;MAC9BZ,SAAS,CAACvI,IAAI,CAAC;MACfyI,cAAc,CAACW,GAAG,CAACvH,GAAG,CAAC;IACzB,CAAC,MAAM,IAAImH,WAAW,CAACK,SAAS,EAAE,IAAI,CAACZ,cAAc,CAACM,GAAG,CAACG,SAAS,CAAC,EAAE;MACpET,cAAc,CAACW,GAAG,CAACF,SAAS,CAAC;MAC7BV,eAAe,CAACQ,WAAW,CAAC;IAC9B;EACF;AACF;AACA,SAASM,wBAAwB,CAACC,MAAM,EAAE;EACxC,MAAMvJ,IAAI,GAAGP,OAAO,CAAC+J,0BAA0B,CAACD,MAAM,CAAC;EACvD,OAAO9J,OAAO,CAACgK,gBAAgB,CAACzJ,IAAI,CAAC;AACvC;AACA,SAAS0J,uBAAuB,CAACnK,SAAS,EAAE;EAC1C,MAAMoK,KAAK,GAAGpK,SAAS,CAACoK,KAAK;EAC7B,OAAOA,KAAK,CAAC9H,GAAG,KAAK,MAAM,IAAI8H,KAAK,CAACzJ,MAAM,KAAKT,OAAO,CAACmK,QAAQ,EAAE,CAACC,eAAe,EAAE;AACtF;AACA,SAASC,gBAAgB,CAAClD,MAAM,EAAE;EAChC,MAAMmD,cAAc,GAAGvK,KAAK,CAACwK,aAAa,CAACpD,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACyK,aAAa,EAAEC,OAAO,IAAI;IAClG,MAAM5K,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAItH,OAAO,CAACgI,gBAAgB,CAAClI,SAAS,CAAC,EAAE;MACvCA,SAAS,CAAC6K,KAAK,EAAE;MACjB,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC,EAAE,CAAC,CAAC,EAAExD,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAAC4K,wBAAwB,EAAEC,UAAU,IAAI;IAC5E,MAAM/K,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI,CAACtH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MACzC,OAAO,KAAK;IACd;IACAA,SAAS,CAACgL,eAAe,CAACD,UAAU,CAAC;IACrC,OAAO,IAAI;EACb,CAAC,EAAE7K,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACgL,mBAAmB,EAAEH,UAAU,IAAI;IACrG,MAAM/K,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI,CAACtH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MACzC,OAAO,KAAK;IACd;IACAA,SAAS,CAACmL,UAAU,CAACJ,UAAU,CAAC;IAChC,OAAO,IAAI;EACb,CAAC,EAAE7K,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACkL,mBAAmB,EAAEL,UAAU,IAAI;IACrG,MAAM/K,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI,CAACtH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MACzC,OAAO,KAAK;IACd;IACAA,SAAS,CAACqL,UAAU,CAACN,UAAU,CAAC;IAChC,OAAO,IAAI;EACb,CAAC,EAAE7K,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACoL,iCAAiC,EAAEC,WAAW,IAAI;IACpH,MAAMvL,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI,OAAO+D,WAAW,KAAK,QAAQ,EAAE;MACnC,IAAIrL,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;QACxCA,SAAS,CAACwL,UAAU,CAACD,WAAW,CAAC;MACnC,CAAC,MAAM,IAAIrL,OAAO,CAAC0H,2BAA2B,CAAC5H,SAAS,CAAC,EAAE;IAC7D,CAAC,MAAM;MACL,IAAI,CAACE,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,IAAI,CAACE,OAAO,CAAC0H,2BAA2B,CAAC5H,SAAS,CAAC,EAAE;QAC5F,OAAO,KAAK;MACd;MACA,MAAMsI,YAAY,GAAGiD,WAAW,CAACjD,YAAY;MAC7C,IAAIA,YAAY,IAAI,IAAI,EAAE;QACxBxI,SAAS,CAAC+H,8BAA8B,CAACS,YAAY,EAAEtI,SAAS,EAAEqH,MAAM,CAAC;MAC3E,CAAC,MAAM,IAAInH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;QAC/C,MAAMyL,IAAI,GAAGF,WAAW,CAACE,IAAI;QAC7B,IAAIA,IAAI,EAAE;UACRzL,SAAS,CAACwL,UAAU,CAACC,IAAI,CAAC;QAC5B;QACA,OAAO,IAAI;MACb;IACF;IACA,OAAO,IAAI;EACb,CAAC,EAAEvL,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACwL,mBAAmB,EAAE,MAAM;IAC7F,MAAM1L,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI,CAACtH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MACzC,OAAO,KAAK;IACd;IACAA,SAAS,CAACiI,UAAU,EAAE;IACtB,OAAO,IAAI;EACb,CAAC,EAAE/H,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACyL,mBAAmB,EAAElI,MAAM,IAAI;IACjG,MAAMzD,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI,CAACtH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MACzC,OAAO,KAAK;IACd;IACAA,SAAS,CAAC4L,UAAU,CAACnI,MAAM,CAAC;IAC5B,OAAO,IAAI;EACb,CAAC,EAAEvD,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAAC2L,sBAAsB,EAAEpI,MAAM,IAAI;IACpG,MAAMzD,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI,CAACtH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,IAAI,CAACE,OAAO,CAACgI,gBAAgB,CAAClI,SAAS,CAAC,EAAE;MACjF,OAAO,KAAK;IACd;IACA,MAAMoJ,KAAK,GAAGpJ,SAAS,CAACmI,QAAQ,EAAE;IAClC,KAAK,MAAM1H,IAAI,IAAI2I,KAAK,EAAE;MACxB,MAAM3G,OAAO,GAAGxC,KAAK,CAACyJ,sCAAsC,CAACjJ,IAAI,CAAC;MAClEgC,OAAO,CAACe,SAAS,CAACC,MAAM,CAAC;IAC3B;IACA,OAAO,IAAI;EACb,CAAC,EAAEvD,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAAC4L,yBAAyB,EAAEC,WAAW,IAAI;IAC5G,MAAM/L,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI,CAACtH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MACzC,OAAO,KAAK;IACd;IACAA,SAAS,CAACgM,eAAe,CAACD,WAAW,CAAC;IACtC,OAAO,IAAI;EACb,CAAC,EAAE7L,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAAC+L,wBAAwB,EAAE,MAAM;IAClG,MAAMjM,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI,CAACtH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MACzC,OAAO,KAAK;IACd;IACAA,SAAS,CAACkM,eAAe,EAAE;IAC3B,OAAO,IAAI;EACb,CAAC,EAAEhM,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACiM,sBAAsB,EAAE,MAAM;IAChGpD,sBAAsB,CAAC,MAAM;MAC3B1B,MAAM,CAAC+E,eAAe,CAAClM,OAAO,CAACoL,iCAAiC,EAAE,IAAI,CAAC;IACzE,CAAC,EAAEe,KAAK,IAAI;MACV,MAAM1I,MAAM,GAAG0I,KAAK,CAACC,SAAS,EAAE;MAChC,IAAI3I,MAAM,KAAK,EAAE,EAAE;QACjB0I,KAAK,CAAC3I,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC;MAC7B;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb,CAAC,EAAEzD,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACqM,uBAAuB,EAAE,MAAM;IACjGxD,sBAAsB,CAACtI,IAAI,IAAI;MAC7B,IAAIP,OAAO,CAACsM,WAAW,CAAC/L,IAAI,CAAC,EAAE;QAC7B,MAAMgM,WAAW,GAAGhM,IAAI,CAACiM,cAAc,EAAE;QACzC,MAAMC,SAAS,GAAGF,WAAW,CAACA,WAAW,CAACnD,MAAM,GAAG,CAAC,CAAC;QACrD,IAAIqD,SAAS,KAAK,IAAI,EAAE;UACtBtF,MAAM,CAAC+E,eAAe,CAAClM,OAAO,CAAC4K,wBAAwB,EAAE,IAAI,CAAC;QAChE;MACF;IACF,CAAC,EAAEuB,KAAK,IAAI;MACV,MAAM1I,MAAM,GAAG0I,KAAK,CAACC,SAAS,EAAE;MAChC,IAAI3I,MAAM,KAAK,CAAC,EAAE;QAChB0I,KAAK,CAAC3I,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC;MAC7B;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb,CAAC,EAAEzD,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAAC0M,oBAAoB,EAAExF,KAAK,IAAI;IACjG,MAAMpH,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAItH,OAAO,CAACgI,gBAAgB,CAAClI,SAAS,CAAC,IAAI,CAAC+J,wBAAwB,CAAC3C,KAAK,CAAC4C,MAAM,CAAC,EAAE;MAClF;MACA;MACA,MAAMZ,KAAK,GAAGpJ,SAAS,CAACmI,QAAQ,EAAE;MAClC,IAAIiB,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;QACpBF,KAAK,CAAC,CAAC,CAAC,CAACyD,cAAc,EAAE;QACzB,OAAO,IAAI;MACb;IACF,CAAC,MAAM,IAAI3M,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MAC/C,MAAM8M,YAAY,GAAG5M,OAAO,CAAC6M,gBAAgB,CAAC/M,SAAS,CAACoK,KAAK,EAAE,IAAI,CAAC;MACpE,IAAIlK,OAAO,CAACgK,gBAAgB,CAAC4C,YAAY,CAAC,IAAI,CAACA,YAAY,CAACE,UAAU,EAAE,IAAI,CAACF,YAAY,CAACG,QAAQ,EAAE,EAAE;QACpGH,YAAY,CAACD,cAAc,EAAE;QAC7BzF,KAAK,CAACE,cAAc,EAAE;QACtB,OAAO,IAAI;MACb,CAAC,MAAM,IAAIpH,OAAO,CAACgN,cAAc,CAACJ,YAAY,CAAC,IAAI,CAACA,YAAY,CAACG,QAAQ,EAAE,IAAI,CAACH,YAAY,CAACK,UAAU,EAAE,EAAE;QACzGL,YAAY,CAACM,MAAM,EAAE;QACrBhG,KAAK,CAACE,cAAc,EAAE;QACtB,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd,CAAC,EAAEpH,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACmN,sBAAsB,EAAEjG,KAAK,IAAI;IACnG,MAAMpH,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAItH,OAAO,CAACgI,gBAAgB,CAAClI,SAAS,CAAC,EAAE;MACvC;MACA;MACA,MAAMoJ,KAAK,GAAGpJ,SAAS,CAACmI,QAAQ,EAAE;MAClC,IAAIiB,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;QACpBF,KAAK,CAAC,CAAC,CAAC,CAACkE,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;QACzB,OAAO,IAAI;MACb;IACF,CAAC,MAAM,IAAIpN,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MAC/C,IAAImK,uBAAuB,CAACnK,SAAS,CAAC,EAAE;QACtCoH,KAAK,CAACE,cAAc,EAAE;QACtB,OAAO,IAAI;MACb;MACA,MAAMwF,YAAY,GAAG5M,OAAO,CAAC6M,gBAAgB,CAAC/M,SAAS,CAACoK,KAAK,EAAE,KAAK,CAAC;MACrE,IAAIlK,OAAO,CAACgK,gBAAgB,CAAC4C,YAAY,CAAC,IAAI,CAACA,YAAY,CAACE,UAAU,EAAE,IAAI,CAACF,YAAY,CAACG,QAAQ,EAAE,EAAE;QACpGH,YAAY,CAACQ,UAAU,EAAE;QACzBlG,KAAK,CAACE,cAAc,EAAE;QACtB,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd,CAAC,EAAEpH,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACqN,sBAAsB,EAAEnG,KAAK,IAAI;IACnG,MAAMoG,WAAW,GAAGtN,OAAO,CAACsH,aAAa,EAAE;IAC3C,IAAItH,OAAO,CAACgI,gBAAgB,CAACsF,WAAW,CAAC,EAAE;MACzC;MACA;MACA,MAAMpE,KAAK,GAAGoE,WAAW,CAACrF,QAAQ,EAAE;MACpC,IAAIiB,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;QACpBlC,KAAK,CAACE,cAAc,EAAE;QACtB8B,KAAK,CAAC,CAAC,CAAC,CAACyD,cAAc,EAAE;QACzB,OAAO,IAAI;MACb;IACF;IACA,IAAI,CAAC3M,OAAO,CAACyH,iBAAiB,CAAC6F,WAAW,CAAC,EAAE;MAC3C,OAAO,KAAK;IACd;IACA,IAAIxN,SAAS,CAACyN,wCAAwC,CAACD,WAAW,EAAE,IAAI,CAAC,EAAE;MACzE,MAAME,cAAc,GAAGtG,KAAK,CAACuG,QAAQ;MACrCvG,KAAK,CAACE,cAAc,EAAE;MACtBtH,SAAS,CAAC4N,cAAc,CAACJ,WAAW,EAAEE,cAAc,EAAE,IAAI,CAAC;MAC3D,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC,EAAExN,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAAC2N,uBAAuB,EAAEzG,KAAK,IAAI;IACpG,MAAMoG,WAAW,GAAGtN,OAAO,CAACsH,aAAa,EAAE;IAC3C,IAAItH,OAAO,CAACgI,gBAAgB,CAACsF,WAAW,CAAC,IAAI,CAACzD,wBAAwB,CAAC3C,KAAK,CAAC4C,MAAM,CAAC,EAAE;MACpF;MACA;MACA,MAAMZ,KAAK,GAAGoE,WAAW,CAACrF,QAAQ,EAAE;MACpC,IAAIiB,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;QACpBlC,KAAK,CAACE,cAAc,EAAE;QACtB8B,KAAK,CAAC,CAAC,CAAC,CAACkE,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;QACzB,OAAO,IAAI;MACb;IACF;IACA,IAAI,CAACpN,OAAO,CAACyH,iBAAiB,CAAC6F,WAAW,CAAC,EAAE;MAC3C,OAAO,KAAK;IACd;IACA,MAAME,cAAc,GAAGtG,KAAK,CAACuG,QAAQ;IACrC,IAAI3N,SAAS,CAACyN,wCAAwC,CAACD,WAAW,EAAE,KAAK,CAAC,EAAE;MAC1EpG,KAAK,CAACE,cAAc,EAAE;MACtBtH,SAAS,CAAC4N,cAAc,CAACJ,WAAW,EAAEE,cAAc,EAAE,KAAK,CAAC;MAC5D,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC,EAAExN,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAAC4N,qBAAqB,EAAE1G,KAAK,IAAI;IAClG,IAAI2C,wBAAwB,CAAC3C,KAAK,CAAC4C,MAAM,CAAC,EAAE;MAC1C,OAAO,KAAK;IACd;IACA,MAAMhK,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI,CAACtH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MACzC,OAAO,KAAK;IACd;IACAoH,KAAK,CAACE,cAAc,EAAE;IACtB,MAAM;MACJd;IACF,CAAC,GAAGxG,SAAS;IACb,MAAM+N,UAAU,GAAGvH,MAAM,CAACwH,OAAO,EAAE;IACnC,IAAIhO,SAAS,CAACiO,WAAW,EAAE,IAAIzH,MAAM,CAAC7F,MAAM,KAAK,CAAC,IAAI,CAACT,OAAO,CAACgO,WAAW,CAACH,UAAU,CAAC,EAAE;MACtF,MAAMtL,OAAO,GAAGxC,KAAK,CAACyJ,sCAAsC,CAACqE,UAAU,CAAC;MACxE,IAAItL,OAAO,CAAC6J,SAAS,EAAE,GAAG,CAAC,EAAE;QAC3B,OAAOjF,MAAM,CAAC+E,eAAe,CAAClM,OAAO,CAACqM,uBAAuB,EAAEhH,SAAS,CAAC;MAC3E;IACF;IACA,OAAO8B,MAAM,CAAC+E,eAAe,CAAClM,OAAO,CAAC4K,wBAAwB,EAAE,IAAI,CAAC;EACvE,CAAC,EAAE5K,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACiO,kBAAkB,EAAE/G,KAAK,IAAI;IAC/F,IAAI2C,wBAAwB,CAAC3C,KAAK,CAAC4C,MAAM,CAAC,EAAE;MAC1C,OAAO,KAAK;IACd;IACA,MAAMhK,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI,CAACtH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MACzC,OAAO,KAAK;IACd;IACAoH,KAAK,CAACE,cAAc,EAAE;IACtB,OAAOD,MAAM,CAAC+E,eAAe,CAAClM,OAAO,CAAC4K,wBAAwB,EAAE,KAAK,CAAC;EACxE,CAAC,EAAE5K,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACkO,iBAAiB,EAAEhH,KAAK,IAAI;IAC9F,MAAMpH,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI,CAACtH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MACzC,OAAO,KAAK;IACd;IACA,IAAIoH,KAAK,KAAK,IAAI,EAAE;MAClB;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAI,CAAC1F,MAAM,IAAID,SAAS,IAAII,eAAe,KAAKN,oBAAoB,EAAE;QACpE,OAAO,KAAK;MACd;MACA6F,KAAK,CAACE,cAAc,EAAE;MACtB,IAAIF,KAAK,CAACuG,QAAQ,EAAE;QAClB,OAAOtG,MAAM,CAAC+E,eAAe,CAAClM,OAAO,CAAC4L,yBAAyB,EAAE,KAAK,CAAC;MACzE;IACF;IACA,OAAOzE,MAAM,CAAC+E,eAAe,CAAClM,OAAO,CAAC+L,wBAAwB,EAAE1G,SAAS,CAAC;EAC5E,CAAC,EAAErF,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACmO,kBAAkB,EAAE,MAAM;IAC5F,MAAMrO,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI,CAACtH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MACzC,OAAO,KAAK;IACd;IACAqH,MAAM,CAACiH,IAAI,EAAE;IACb,OAAO,IAAI;EACb,CAAC,EAAEpO,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACqO,YAAY,EAAEnH,KAAK,IAAI;IACzF,MAAM,GAAG0B,KAAK,CAAC,GAAGT,UAAU,CAACjB,KAAK,CAAC;IACnC,IAAI0B,KAAK,CAACQ,MAAM,GAAG,CAAC,EAAE;MACpB,MAAMlJ,CAAC,GAAGgH,KAAK,CAACoH,OAAO;MACvB,MAAMnO,CAAC,GAAG+G,KAAK,CAACqH,OAAO;MACvB,MAAMC,UAAU,GAAGvO,cAAc,CAACC,CAAC,EAAEC,CAAC,CAAC;MACvC,IAAIqO,UAAU,KAAK,IAAI,EAAE;QACvB,MAAM;UACJ/N,MAAM,EAAEgO,SAAS;UACjBlO,IAAI,EAAE2F;QACR,CAAC,GAAGsI,UAAU;QACd,MAAMjO,IAAI,GAAGP,OAAO,CAAC+J,0BAA0B,CAAC7D,OAAO,CAAC;QACxD,IAAI3F,IAAI,KAAK,IAAI,EAAE;UACjB,MAAMT,SAAS,GAAGE,OAAO,CAAC0O,qBAAqB,EAAE;UACjD,IAAI1O,OAAO,CAACsM,WAAW,CAAC/L,IAAI,CAAC,EAAE;YAC7BT,SAAS,CAACwG,MAAM,CAACqI,GAAG,CAACpO,IAAI,CAAC8I,MAAM,EAAE,EAAEoF,SAAS,EAAE,MAAM,CAAC;YACtD3O,SAAS,CAACoK,KAAK,CAACyE,GAAG,CAACpO,IAAI,CAAC8I,MAAM,EAAE,EAAEoF,SAAS,EAAE,MAAM,CAAC;UACvD,CAAC,MAAM;YACL,MAAMhF,SAAS,GAAGlJ,IAAI,CAACqO,gBAAgB,EAAE,CAACvF,MAAM,EAAE;YAClD,MAAM5I,MAAM,GAAGF,IAAI,CAACsO,oBAAoB,EAAE,GAAG,CAAC;YAC9C/O,SAAS,CAACwG,MAAM,CAACqI,GAAG,CAAClF,SAAS,EAAEhJ,MAAM,EAAE,SAAS,CAAC;YAClDX,SAAS,CAACoK,KAAK,CAACyE,GAAG,CAAClF,SAAS,EAAEhJ,MAAM,EAAE,SAAS,CAAC;UACnD;UACA,MAAMqO,mBAAmB,GAAG9O,OAAO,CAAC+O,iCAAiC,CAACjP,SAAS,CAAC;UAChFE,OAAO,CAACgP,aAAa,CAACF,mBAAmB,CAAC;QAC5C;QACA3H,MAAM,CAAC+E,eAAe,CAACtK,eAAe,EAAEgH,KAAK,CAAC;MAChD;MACA1B,KAAK,CAACE,cAAc,EAAE;MACtB,OAAO,IAAI;IACb;IACA,MAAMtH,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAItH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MACxC,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC,EAAEE,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACiP,iBAAiB,EAAE/H,KAAK,IAAI;IAC9F,MAAM,CAACgI,cAAc,CAAC,GAAG/G,UAAU,CAACjB,KAAK,CAAC;IAC1C,MAAMpH,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI4H,cAAc,IAAI,CAAClP,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MAC3D,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC,EAAEE,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACmP,gBAAgB,EAAEjI,KAAK,IAAI;IAC7F,MAAM,CAACgI,cAAc,CAAC,GAAG/G,UAAU,CAACjB,KAAK,CAAC;IAC1C,MAAMpH,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAI4H,cAAc,IAAI,CAAClP,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,EAAE;MAC3D,OAAO,KAAK;IACd;IACA,MAAMI,CAAC,GAAGgH,KAAK,CAACoH,OAAO;IACvB,MAAMnO,CAAC,GAAG+G,KAAK,CAACqH,OAAO;IACvB,MAAMC,UAAU,GAAGvO,cAAc,CAACC,CAAC,EAAEC,CAAC,CAAC;IACvC,IAAIqO,UAAU,KAAK,IAAI,EAAE;MACvB,MAAMjO,IAAI,GAAGP,OAAO,CAAC+J,0BAA0B,CAACyE,UAAU,CAACjO,IAAI,CAAC;MAChE,IAAIP,OAAO,CAACgK,gBAAgB,CAACzJ,IAAI,CAAC,EAAE;QAClC;QACA;QACA2G,KAAK,CAACE,cAAc,EAAE;MACxB;IACF;IACA,OAAO,IAAI;EACb,CAAC,EAAEpH,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACoP,YAAY,EAAElI,KAAK,IAAI;IACzFtH,SAAS,CAACiI,6BAA6B,CAACV,MAAM,EAAED,KAAK,YAAYY,cAAc,GAAGZ,KAAK,GAAG,IAAI,CAAC;IAC/F,OAAO,IAAI;EACb,CAAC,EAAElH,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACqP,WAAW,EAAEnI,KAAK,IAAI;IACxFU,gBAAgB,CAACV,KAAK,EAAEC,MAAM,CAAC;IAC/B,OAAO,IAAI;EACb,CAAC,EAAEnH,OAAO,CAAC+K,uBAAuB,CAAC,EAAE5D,MAAM,CAACqD,eAAe,CAACxK,OAAO,CAACsP,aAAa,EAAEpI,KAAK,IAAI;IAC1F,MAAM,GAAG0B,KAAK,EAAE2G,cAAc,CAAC,GAAGpH,UAAU,CAACjB,KAAK,CAAC;IACnD,IAAI0B,KAAK,CAACQ,MAAM,GAAG,CAAC,IAAI,CAACmG,cAAc,EAAE;MACvCpI,MAAM,CAAC+E,eAAe,CAACtK,eAAe,EAAEgH,KAAK,CAAC;MAC9C,OAAO,IAAI;IACb;IACA,MAAM9I,SAAS,GAAGE,OAAO,CAACsH,aAAa,EAAE;IACzC,IAAItH,OAAO,CAACyH,iBAAiB,CAAC3H,SAAS,CAAC,IAAIE,OAAO,CAAC0H,2BAA2B,CAAC5H,SAAS,CAAC,EAAE;MAC1FmH,kBAAkB,CAACC,KAAK,EAAEC,MAAM,CAAC;MACjC,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC,EAAEnH,OAAO,CAAC+K,uBAAuB,CAAC,CAAC;EACpC,OAAOT,cAAc;AACvB;AAEAkF,OAAO,CAACrJ,kBAAkB,GAAGA,kBAAkB;AAC/CqJ,OAAO,CAACnM,gBAAgB,GAAGA,gBAAgB;AAC3CmM,OAAO,CAACxI,cAAc,GAAGA,cAAc;AACvCwI,OAAO,CAAC1K,YAAY,GAAGA,YAAY;AACnC0K,OAAO,CAAC5N,eAAe,GAAGA,eAAe;AACzC4N,OAAO,CAACzK,WAAW,GAAGA,WAAW;AACjCyK,OAAO,CAAC1N,SAAS,GAAGA,SAAS;AAC7B0N,OAAO,CAACrH,UAAU,GAAGA,UAAU;AAC/BqH,OAAO,CAACnF,gBAAgB,GAAGA,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}