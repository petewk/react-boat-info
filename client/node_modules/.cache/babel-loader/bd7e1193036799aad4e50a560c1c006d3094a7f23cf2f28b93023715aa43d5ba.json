{"ast":null,"code":"import '@tiptap/extension-text-style';\nimport { Extension } from '@tiptap/core';\nvar Color = Extension.create({\n  name: 'color',\n  addOptions: function addOptions() {\n    return {\n      types: ['textStyle']\n    };\n  },\n  addGlobalAttributes: function addGlobalAttributes() {\n    return [{\n      types: this.options.types,\n      attributes: {\n        color: {\n          default: null,\n          parseHTML: function parseHTML(element) {\n            var _a;\n            return (_a = element.style.color) === null || _a === void 0 ? void 0 : _a.replace(/['\"]+/g, '');\n          },\n          renderHTML: function renderHTML(attributes) {\n            if (!attributes.color) {\n              return {};\n            }\n            return {\n              style: \"color: \".concat(attributes.color)\n            };\n          }\n        }\n      }\n    }];\n  },\n  addCommands: function addCommands() {\n    return {\n      setColor: function setColor(color) {\n        return function (_ref) {\n          var chain = _ref.chain;\n          return chain().setMark('textStyle', {\n            color: color\n          }).run();\n        };\n      },\n      unsetColor: function unsetColor() {\n        return function (_ref2) {\n          var chain = _ref2.chain;\n          return chain().setMark('textStyle', {\n            color: null\n          }).removeEmptyTextStyle().run();\n        };\n      }\n    };\n  }\n});\nexport { Color, Color as default };","map":{"version":3,"mappings":";;AAuBa,SAAK,GAAGA,SAAS,CAACC,MAAM,CAAe;EAClDC,IAAI,EAAE,OAAO;EAEbC,UAAU;IACR,OAAO;MACLC,KAAK,EAAE,CAAC,WAAW;KACpB;GACF;EAEDC,mBAAmB;IACjB,OAAO,CACL;MACED,KAAK,EAAE,IAAI,CAACE,OAAO,CAACF,KAAK;MACzBG,UAAU,EAAE;QACVC,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,SAAS,EAAE,0BAAO;YAAA;YAAI,oBAAO,CAACC,KAAK,CAACH,KAAK,0CAAEI,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;UAAA;UAChEC,UAAU,EAAE,8BAAU,EAAG;YACvB,IAAI,CAACN,UAAU,CAACC,KAAK,EAAE;cACrB,OAAO,EAAE;YACV;YAED,OAAO;cACLG,KAAK,mBAAYJ,UAAU,CAACC,KAAK;aAClC;;QAEJ;MACF;IACF,EACF;GACF;EAEDM,WAAW;IACT,OAAO;MACLC,QAAQ,EAAE,uBAAK;QAAA,OAAI,gBAAc;UAAA,IAAXC,KAAK,QAALA,KAAK;UACzB,OAAOA,KAAK,EAAE,CACXC,OAAO,CAAC,WAAW,EAAE;YAAET,KAAK,EAALA;UAAK,CAAE,CAAC,CAC/BU,GAAG,EAAE;SACT;MAAA;MACDC,UAAU,EAAE;QAAA,OAAM,iBAAc;UAAA,IAAXH,KAAK,SAALA,KAAK;UACxB,OAAOA,KAAK,EAAE,CACXC,OAAO,CAAC,WAAW,EAAE;YAAET,KAAK,EAAE;UAAI,CAAE,CAAC,CACrCY,oBAAoB,EAAE,CACtBF,GAAG,EAAE;SACT;MAAA;KACF;;AAEJ","names":["Extension","create","name","addOptions","types","addGlobalAttributes","options","attributes","color","default","parseHTML","style","replace","renderHTML","addCommands","setColor","chain","setMark","run","unsetColor","removeEmptyTextStyle"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-color\\src\\color.ts"],"sourcesContent":["import '@tiptap/extension-text-style'\n\nimport { Extension } from '@tiptap/core'\n\nexport type ColorOptions = {\n  types: string[],\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    color: {\n      /**\n       * Set the text color\n       */\n      setColor: (color: string) => ReturnType,\n      /**\n       * Unset the text color\n       */\n      unsetColor: () => ReturnType,\n    }\n  }\n}\n\nexport const Color = Extension.create<ColorOptions>({\n  name: 'color',\n\n  addOptions() {\n    return {\n      types: ['textStyle'],\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          color: {\n            default: null,\n            parseHTML: element => element.style.color?.replace(/['\"]+/g, ''),\n            renderHTML: attributes => {\n              if (!attributes.color) {\n                return {}\n              }\n\n              return {\n                style: `color: ${attributes.color}`,\n              }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setColor: color => ({ chain }) => {\n        return chain()\n          .setMark('textStyle', { color })\n          .run()\n      },\n      unsetColor: () => ({ chain }) => {\n        return chain()\n          .setMark('textStyle', { color: null })\n          .removeEmptyTextStyle()\n          .run()\n      },\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}