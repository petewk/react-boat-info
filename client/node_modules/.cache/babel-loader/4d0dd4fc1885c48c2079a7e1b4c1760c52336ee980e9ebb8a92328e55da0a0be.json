{"ast":null,"code":"import { combineTransactionSteps, getChangedRanges, getMarksBetween, findChildrenInRange, getAttributes, Mark, mergeAttributes, markPasteRule } from '@tiptap/core';\nimport { test, find, registerCustomProtocol, reset } from 'linkifyjs';\nimport { Plugin, PluginKey } from '@tiptap/pm/state';\nfunction autolink(options) {\n  return new Plugin({\n    key: new PluginKey('autolink'),\n    appendTransaction: (transactions, oldState, newState) => {\n      const docChanges = transactions.some(transaction => transaction.docChanged) && !oldState.doc.eq(newState.doc);\n      const preventAutolink = transactions.some(transaction => transaction.getMeta('preventAutolink'));\n      if (!docChanges || preventAutolink) {\n        return;\n      }\n      const {\n        tr\n      } = newState;\n      const transform = combineTransactionSteps(oldState.doc, [...transactions]);\n      const {\n        mapping\n      } = transform;\n      const changes = getChangedRanges(transform);\n      changes.forEach(_ref => {\n        let {\n          oldRange,\n          newRange\n        } = _ref;\n        // at first we check if we have to remove links\n        getMarksBetween(oldRange.from, oldRange.to, oldState.doc).filter(item => item.mark.type === options.type).forEach(oldMark => {\n          const newFrom = mapping.map(oldMark.from);\n          const newTo = mapping.map(oldMark.to);\n          const newMarks = getMarksBetween(newFrom, newTo, newState.doc).filter(item => item.mark.type === options.type);\n          if (!newMarks.length) {\n            return;\n          }\n          const newMark = newMarks[0];\n          const oldLinkText = oldState.doc.textBetween(oldMark.from, oldMark.to, undefined, ' ');\n          const newLinkText = newState.doc.textBetween(newMark.from, newMark.to, undefined, ' ');\n          const wasLink = test(oldLinkText);\n          const isLink = test(newLinkText);\n          // remove only the link, if it was a link before too\n          // because we don’t want to remove links that were set manually\n          if (wasLink && !isLink) {\n            tr.removeMark(newMark.from, newMark.to, options.type);\n          }\n        });\n        // now let’s see if we can add new links\n        const nodesInChangedRanges = findChildrenInRange(newState.doc, newRange, node => node.isTextblock);\n        let textBlock;\n        let textBeforeWhitespace;\n        if (nodesInChangedRanges.length > 1) {\n          // Grab the first node within the changed ranges (ex. the first of two paragraphs when hitting enter)\n          textBlock = nodesInChangedRanges[0];\n          textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, textBlock.pos + textBlock.node.nodeSize, undefined, ' ');\n        } else if (nodesInChangedRanges.length\n        // We want to make sure to include the block seperator argument to treat hard breaks like spaces\n        && newState.doc.textBetween(newRange.from, newRange.to, ' ', ' ').endsWith(' ')) {\n          textBlock = nodesInChangedRanges[0];\n          textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, newRange.to, undefined, ' ');\n        }\n        if (textBlock && textBeforeWhitespace) {\n          const wordsBeforeWhitespace = textBeforeWhitespace.split(' ').filter(s => s !== '');\n          if (wordsBeforeWhitespace.length <= 0) {\n            return false;\n          }\n          const lastWordBeforeSpace = wordsBeforeWhitespace[wordsBeforeWhitespace.length - 1];\n          const lastWordAndBlockOffset = textBlock.pos + textBeforeWhitespace.lastIndexOf(lastWordBeforeSpace);\n          if (!lastWordBeforeSpace) {\n            return false;\n          }\n          find(lastWordBeforeSpace).filter(link => link.isLink).filter(link => {\n            if (options.validate) {\n              return options.validate(link.value);\n            }\n            return true;\n          })\n          // calculate link position\n          .map(link => ({\n            ...link,\n            from: lastWordAndBlockOffset + link.start + 1,\n            to: lastWordAndBlockOffset + link.end + 1\n          }))\n          // add link mark\n          .forEach(link => {\n            tr.addMark(link.from, link.to, options.type.create({\n              href: link.href\n            }));\n          });\n        }\n      });\n      if (!tr.steps.length) {\n        return;\n      }\n      return tr;\n    }\n  });\n}\nfunction clickHandler(options) {\n  return new Plugin({\n    key: new PluginKey('handleClickLink'),\n    props: {\n      handleClick: (view, pos, event) => {\n        var _a, _b, _c;\n        const attrs = getAttributes(view.state, options.type.name);\n        const link = (_a = event.target) === null || _a === void 0 ? void 0 : _a.closest('a');\n        const href = (_b = link === null || link === void 0 ? void 0 : link.href) !== null && _b !== void 0 ? _b : attrs.href;\n        const target = (_c = link === null || link === void 0 ? void 0 : link.target) !== null && _c !== void 0 ? _c : attrs.target;\n        if (link && href) {\n          window.open(href, target);\n          return true;\n        }\n        return false;\n      }\n    }\n  });\n}\nfunction pasteHandler(options) {\n  return new Plugin({\n    key: new PluginKey('handlePasteLink'),\n    props: {\n      handlePaste: (view, event, slice) => {\n        const {\n          state\n        } = view;\n        const {\n          selection\n        } = state;\n        const {\n          empty\n        } = selection;\n        if (empty) {\n          return false;\n        }\n        let textContent = '';\n        slice.content.forEach(node => {\n          textContent += node.textContent;\n        });\n        const link = find(textContent).find(item => item.isLink && item.value === textContent);\n        if (!textContent || !link) {\n          return false;\n        }\n        options.editor.commands.setMark(options.type, {\n          href: link.href\n        });\n        return true;\n      }\n    }\n  });\n}\nconst Link = Mark.create({\n  name: 'link',\n  priority: 1000,\n  keepOnSplit: false,\n  onCreate() {\n    this.options.protocols.forEach(protocol => {\n      if (typeof protocol === 'string') {\n        registerCustomProtocol(protocol);\n        return;\n      }\n      registerCustomProtocol(protocol.scheme, protocol.optionalSlashes);\n    });\n  },\n  onDestroy() {\n    reset();\n  },\n  inclusive() {\n    return this.options.autolink;\n  },\n  addOptions() {\n    return {\n      openOnClick: true,\n      linkOnPaste: true,\n      autolink: true,\n      protocols: [],\n      HTMLAttributes: {\n        target: '_blank',\n        rel: 'noopener noreferrer nofollow',\n        class: null\n      },\n      validate: undefined\n    };\n  },\n  addAttributes() {\n    return {\n      href: {\n        default: null\n      },\n      target: {\n        default: this.options.HTMLAttributes.target\n      },\n      class: {\n        default: this.options.HTMLAttributes.class\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'a[href]:not([href *= \"javascript:\" i])'\n    }];\n  },\n  renderHTML(_ref2) {\n    let {\n      HTMLAttributes\n    } = _ref2;\n    return ['a', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setLink: attributes => _ref3 => {\n        let {\n          chain\n        } = _ref3;\n        return chain().setMark(this.name, attributes).setMeta('preventAutolink', true).run();\n      },\n      toggleLink: attributes => _ref4 => {\n        let {\n          chain\n        } = _ref4;\n        return chain().toggleMark(this.name, attributes, {\n          extendEmptyMarkRange: true\n        }).setMeta('preventAutolink', true).run();\n      },\n      unsetLink: () => _ref5 => {\n        let {\n          chain\n        } = _ref5;\n        return chain().unsetMark(this.name, {\n          extendEmptyMarkRange: true\n        }).setMeta('preventAutolink', true).run();\n      }\n    };\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: text => find(text).filter(link => {\n        if (this.options.validate) {\n          return this.options.validate(link.value);\n        }\n        return true;\n      }).filter(link => link.isLink).map(link => ({\n        text: link.value,\n        index: link.start,\n        data: link\n      })),\n      type: this.type,\n      getAttributes: match => {\n        var _a;\n        return {\n          href: (_a = match.data) === null || _a === void 0 ? void 0 : _a.href\n        };\n      }\n    })];\n  },\n  addProseMirrorPlugins() {\n    const plugins = [];\n    if (this.options.autolink) {\n      plugins.push(autolink({\n        type: this.type,\n        validate: this.options.validate\n      }));\n    }\n    if (this.options.openOnClick) {\n      plugins.push(clickHandler({\n        type: this.type\n      }));\n    }\n    if (this.options.linkOnPaste) {\n      plugins.push(pasteHandler({\n        editor: this.editor,\n        type: this.type\n      }));\n    }\n    return plugins;\n  }\n});\nexport { Link, Link as default };","map":{"version":3,"names":["autolink","options","Plugin","key","PluginKey","appendTransaction","transactions","oldState","newState","docChanges","some","transaction","docChanged","doc","eq","preventAutolink","getMeta","tr","transform","combineTransactionSteps","mapping","changes","getChangedRanges","forEach","_ref","oldRange","newRange","getMarksBetween","from","to","filter","item","mark","type","oldMark","newFrom","map","newTo","newMarks","length","newMark","oldLinkText","textBetween","undefined","newLinkText","wasLink","test","isLink","removeMark","nodesInChangedRanges","findChildrenInRange","node","isTextblock","textBlock","textBeforeWhitespace","pos","nodeSize","endsWith","wordsBeforeWhitespace","split","s","lastWordBeforeSpace","lastWordAndBlockOffset","lastIndexOf","find","link","validate","value","start","end","addMark","create","href","steps","clickHandler","props","handleClick","view","event","attrs","getAttributes","state","name","_a","target","closest","_b","_c","window","open","pasteHandler","handlePaste","slice","selection","empty","textContent","content","editor","commands","setMark","Link","Mark","priority","keepOnSplit","onCreate","protocols","protocol","registerCustomProtocol","scheme","optionalSlashes","onDestroy","reset","inclusive","addOptions","openOnClick","linkOnPaste","HTMLAttributes","rel","class","addAttributes","default","parseHTML","tag","renderHTML","_ref2","mergeAttributes","addCommands","setLink","attributes","_ref3","chain","setMeta","run","toggleLink","_ref4","toggleMark","extendEmptyMarkRange","unsetLink","_ref5","unsetMark","addPasteRules","markPasteRule","text","index","data","match","addProseMirrorPlugins","plugins","push"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-link\\src\\helpers\\autolink.ts","C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-link\\src\\helpers\\clickHandler.ts","C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-link\\src\\helpers\\pasteHandler.ts","C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-link\\src\\link.ts"],"sourcesContent":["import {\n  combineTransactionSteps,\n  findChildrenInRange,\n  getChangedRanges,\n  getMarksBetween,\n  NodeWithPos,\n} from '@tiptap/core'\nimport { MarkType } from '@tiptap/pm/model'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\nimport { find, test } from 'linkifyjs'\n\ntype AutolinkOptions = {\n  type: MarkType\n  validate?: (url: string) => boolean\n}\n\nexport function autolink(options: AutolinkOptions): Plugin {\n  return new Plugin({\n    key: new PluginKey('autolink'),\n    appendTransaction: (transactions, oldState, newState) => {\n      const docChanges = transactions.some(transaction => transaction.docChanged) && !oldState.doc.eq(newState.doc)\n      const preventAutolink = transactions.some(transaction => transaction.getMeta('preventAutolink'))\n\n      if (!docChanges || preventAutolink) {\n        return\n      }\n\n      const { tr } = newState\n      const transform = combineTransactionSteps(oldState.doc, [...transactions])\n      const { mapping } = transform\n      const changes = getChangedRanges(transform)\n\n      changes.forEach(({ oldRange, newRange }) => {\n        // at first we check if we have to remove links\n        getMarksBetween(oldRange.from, oldRange.to, oldState.doc)\n          .filter(item => item.mark.type === options.type)\n          .forEach(oldMark => {\n            const newFrom = mapping.map(oldMark.from)\n            const newTo = mapping.map(oldMark.to)\n            const newMarks = getMarksBetween(newFrom, newTo, newState.doc).filter(\n              item => item.mark.type === options.type,\n            )\n\n            if (!newMarks.length) {\n              return\n            }\n\n            const newMark = newMarks[0]\n            const oldLinkText = oldState.doc.textBetween(oldMark.from, oldMark.to, undefined, ' ')\n            const newLinkText = newState.doc.textBetween(newMark.from, newMark.to, undefined, ' ')\n            const wasLink = test(oldLinkText)\n            const isLink = test(newLinkText)\n\n            // remove only the link, if it was a link before too\n            // because we don’t want to remove links that were set manually\n            if (wasLink && !isLink) {\n              tr.removeMark(newMark.from, newMark.to, options.type)\n            }\n          })\n\n        // now let’s see if we can add new links\n        const nodesInChangedRanges = findChildrenInRange(\n          newState.doc,\n          newRange,\n          node => node.isTextblock,\n        )\n\n        let textBlock: NodeWithPos | undefined\n        let textBeforeWhitespace: string | undefined\n\n        if (nodesInChangedRanges.length > 1) {\n          // Grab the first node within the changed ranges (ex. the first of two paragraphs when hitting enter)\n          textBlock = nodesInChangedRanges[0]\n          textBeforeWhitespace = newState.doc.textBetween(\n            textBlock.pos,\n            textBlock.pos + textBlock.node.nodeSize,\n            undefined,\n            ' ',\n          )\n        } else if (\n          nodesInChangedRanges.length\n          // We want to make sure to include the block seperator argument to treat hard breaks like spaces\n          && newState.doc.textBetween(newRange.from, newRange.to, ' ', ' ').endsWith(' ')\n        ) {\n          textBlock = nodesInChangedRanges[0]\n          textBeforeWhitespace = newState.doc.textBetween(\n            textBlock.pos,\n            newRange.to,\n            undefined,\n            ' ',\n          )\n        }\n\n        if (textBlock && textBeforeWhitespace) {\n          const wordsBeforeWhitespace = textBeforeWhitespace.split(' ').filter(s => s !== '')\n\n          if (wordsBeforeWhitespace.length <= 0) {\n            return false\n          }\n\n          const lastWordBeforeSpace = wordsBeforeWhitespace[wordsBeforeWhitespace.length - 1]\n          const lastWordAndBlockOffset = textBlock.pos + textBeforeWhitespace.lastIndexOf(lastWordBeforeSpace)\n\n          if (!lastWordBeforeSpace) {\n            return false\n          }\n\n          find(lastWordBeforeSpace)\n            .filter(link => link.isLink)\n            .filter(link => {\n              if (options.validate) {\n                return options.validate(link.value)\n              }\n              return true\n            })\n            // calculate link position\n            .map(link => ({\n              ...link,\n              from: lastWordAndBlockOffset + link.start + 1,\n              to: lastWordAndBlockOffset + link.end + 1,\n            }))\n            // add link mark\n            .forEach(link => {\n              tr.addMark(\n                link.from,\n                link.to,\n                options.type.create({\n                  href: link.href,\n                }),\n              )\n            })\n        }\n      })\n\n      if (!tr.steps.length) {\n        return\n      }\n\n      return tr\n    },\n  })\n}\n","import { getAttributes } from '@tiptap/core'\nimport { MarkType } from '@tiptap/pm/model'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\n\ntype ClickHandlerOptions = {\n  type: MarkType\n}\n\nexport function clickHandler(options: ClickHandlerOptions): Plugin {\n  return new Plugin({\n    key: new PluginKey('handleClickLink'),\n    props: {\n      handleClick: (view, pos, event) => {\n        const attrs = getAttributes(view.state, options.type.name)\n        const link = (event.target as HTMLElement)?.closest('a')\n\n        const href = link?.href ?? attrs.href\n        const target = link?.target ?? attrs.target\n\n        if (link && href) {\n          window.open(href, target)\n\n          return true\n        }\n\n        return false\n      },\n    },\n  })\n}\n","import { Editor } from '@tiptap/core'\nimport { MarkType } from '@tiptap/pm/model'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\nimport { find } from 'linkifyjs'\n\ntype PasteHandlerOptions = {\n  editor: Editor\n  type: MarkType\n}\n\nexport function pasteHandler(options: PasteHandlerOptions): Plugin {\n  return new Plugin({\n    key: new PluginKey('handlePasteLink'),\n    props: {\n      handlePaste: (view, event, slice) => {\n        const { state } = view\n        const { selection } = state\n        const { empty } = selection\n\n        if (empty) {\n          return false\n        }\n\n        let textContent = ''\n\n        slice.content.forEach(node => {\n          textContent += node.textContent\n        })\n\n        const link = find(textContent).find(item => item.isLink && item.value === textContent)\n\n        if (!textContent || !link) {\n          return false\n        }\n\n        options.editor.commands.setMark(options.type, {\n          href: link.href,\n        })\n\n        return true\n      },\n    },\n  })\n}\n","import { Mark, markPasteRule, mergeAttributes } from '@tiptap/core'\nimport { Plugin } from '@tiptap/pm/state'\nimport { find, registerCustomProtocol, reset } from 'linkifyjs'\n\nimport { autolink } from './helpers/autolink'\nimport { clickHandler } from './helpers/clickHandler'\nimport { pasteHandler } from './helpers/pasteHandler'\n\nexport interface LinkProtocolOptions {\n  scheme: string;\n  optionalSlashes?: boolean;\n}\n\nexport interface LinkOptions {\n  /**\n   * If enabled, it adds links as you type.\n   */\n  autolink: boolean\n  /**\n   * An array of custom protocols to be registered with linkifyjs.\n   */\n  protocols: Array<LinkProtocolOptions | string>\n  /**\n   * If enabled, links will be opened on click.\n   */\n  openOnClick: boolean\n  /**\n   * Adds a link to the current selection if the pasted content only contains an url.\n   */\n  linkOnPaste: boolean\n  /**\n   * A list of HTML attributes to be rendered.\n   */\n  HTMLAttributes: Record<string, any>\n  /**\n   * A validation function that modifies link verification for the auto linker.\n   * @param url - The url to be validated.\n   * @returns - True if the url is valid, false otherwise.\n   */\n  validate?: (url: string) => boolean\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    link: {\n      /**\n       * Set a link mark\n       */\n      setLink: (attributes: { href: string; target?: string | null }) => ReturnType\n      /**\n       * Toggle a link mark\n       */\n      toggleLink: (attributes: { href: string; target?: string | null }) => ReturnType\n      /**\n       * Unset a link mark\n       */\n      unsetLink: () => ReturnType\n    }\n  }\n}\n\nexport const Link = Mark.create<LinkOptions>({\n  name: 'link',\n\n  priority: 1000,\n\n  keepOnSplit: false,\n\n  onCreate() {\n    this.options.protocols.forEach(protocol => {\n      if (typeof protocol === 'string') {\n        registerCustomProtocol(protocol)\n        return\n      }\n      registerCustomProtocol(protocol.scheme, protocol.optionalSlashes)\n    })\n  },\n\n  onDestroy() {\n    reset()\n  },\n\n  inclusive() {\n    return this.options.autolink\n  },\n\n  addOptions() {\n    return {\n      openOnClick: true,\n      linkOnPaste: true,\n      autolink: true,\n      protocols: [],\n      HTMLAttributes: {\n        target: '_blank',\n        rel: 'noopener noreferrer nofollow',\n        class: null,\n      },\n      validate: undefined,\n    }\n  },\n\n  addAttributes() {\n    return {\n      href: {\n        default: null,\n      },\n      target: {\n        default: this.options.HTMLAttributes.target,\n      },\n      class: {\n        default: this.options.HTMLAttributes.class,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [{ tag: 'a[href]:not([href *= \"javascript:\" i])' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['a', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setLink:\n        attributes => ({ chain }) => {\n          return chain().setMark(this.name, attributes).setMeta('preventAutolink', true).run()\n        },\n\n      toggleLink:\n        attributes => ({ chain }) => {\n          return chain()\n            .toggleMark(this.name, attributes, { extendEmptyMarkRange: true })\n            .setMeta('preventAutolink', true)\n            .run()\n        },\n\n      unsetLink:\n        () => ({ chain }) => {\n          return chain()\n            .unsetMark(this.name, { extendEmptyMarkRange: true })\n            .setMeta('preventAutolink', true)\n            .run()\n        },\n    }\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: text => find(text)\n          .filter(link => {\n            if (this.options.validate) {\n              return this.options.validate(link.value)\n            }\n\n            return true\n          })\n          .filter(link => link.isLink)\n          .map(link => ({\n            text: link.value,\n            index: link.start,\n            data: link,\n          })),\n        type: this.type,\n        getAttributes: match => ({\n          href: match.data?.href,\n        }),\n      }),\n    ]\n  },\n\n  addProseMirrorPlugins() {\n    const plugins: Plugin[] = []\n\n    if (this.options.autolink) {\n      plugins.push(\n        autolink({\n          type: this.type,\n          validate: this.options.validate,\n        }),\n      )\n    }\n\n    if (this.options.openOnClick) {\n      plugins.push(\n        clickHandler({\n          type: this.type,\n        }),\n      )\n    }\n\n    if (this.options.linkOnPaste) {\n      plugins.push(\n        pasteHandler({\n          editor: this.editor,\n          type: this.type,\n        }),\n      )\n    }\n\n    return plugins\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}