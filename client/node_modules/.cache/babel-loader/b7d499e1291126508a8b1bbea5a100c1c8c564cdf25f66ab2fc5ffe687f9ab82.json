{"ast":null,"code":"import _toConsumableArray from \"C:/Users/petew/OneDrive/Desktop/Web Dev Reboot/react-boat-info/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\nimport { Plugin, PluginKey, TextSelection } from '@tiptap/pm/state';\nvar backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/;\nvar tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/;\nvar CodeBlock = Node.create({\n  name: 'codeBlock',\n  addOptions: function addOptions() {\n    return {\n      languageClassPrefix: 'language-',\n      exitOnTripleEnter: true,\n      exitOnArrowDown: true,\n      HTMLAttributes: {}\n    };\n  },\n  content: 'text*',\n  marks: '',\n  group: 'block',\n  code: true,\n  defining: true,\n  addAttributes: function addAttributes() {\n    var _this = this;\n    return {\n      language: {\n        default: null,\n        parseHTML: function parseHTML(element) {\n          var _a;\n          var languageClassPrefix = _this.options.languageClassPrefix;\n          var classNames = _toConsumableArray(((_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.classList) || []);\n          var languages = classNames.filter(function (className) {\n            return className.startsWith(languageClassPrefix);\n          }).map(function (className) {\n            return className.replace(languageClassPrefix, '');\n          });\n          var language = languages[0];\n          if (!language) {\n            return null;\n          }\n          return language;\n        },\n        rendered: false\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'pre',\n      preserveWhitespace: 'full'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var node = _ref.node,\n      HTMLAttributes = _ref.HTMLAttributes;\n    return ['pre', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), ['code', {\n      class: node.attrs.language ? this.options.languageClassPrefix + node.attrs.language : null\n    }, 0]];\n  },\n  addCommands: function addCommands() {\n    var _this2 = this;\n    return {\n      setCodeBlock: function setCodeBlock(attributes) {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setNode(_this2.name, attributes);\n        };\n      },\n      toggleCodeBlock: function toggleCodeBlock(attributes) {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleNode(_this2.name, 'paragraph', attributes);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this3 = this;\n    return {\n      'Mod-Alt-c': function ModAltC() {\n        return _this3.editor.commands.toggleCodeBlock();\n      },\n      // remove code block when at start of document or code block is empty\n      Backspace: function Backspace() {\n        var _this3$editor$state$s = _this3.editor.state.selection,\n          empty = _this3$editor$state$s.empty,\n          $anchor = _this3$editor$state$s.$anchor;\n        var isAtStart = $anchor.pos === 1;\n        if (!empty || $anchor.parent.type.name !== _this3.name) {\n          return false;\n        }\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return _this3.editor.commands.clearNodes();\n        }\n        return false;\n      },\n      // exit node on triple enter\n      Enter: function Enter(_ref4) {\n        var editor = _ref4.editor;\n        if (!_this3.options.exitOnTripleEnter) {\n          return false;\n        }\n        var state = editor.state;\n        var selection = state.selection;\n        var $from = selection.$from,\n          empty = selection.empty;\n        if (!empty || $from.parent.type !== _this3.type) {\n          return false;\n        }\n        var isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n        var endsWithDoubleNewline = $from.parent.textContent.endsWith('\\n\\n');\n        if (!isAtEnd || !endsWithDoubleNewline) {\n          return false;\n        }\n        return editor.chain().command(function (_ref5) {\n          var tr = _ref5.tr;\n          tr.delete($from.pos - 2, $from.pos);\n          return true;\n        }).exitCode().run();\n      },\n      // exit node on arrow down\n      ArrowDown: function ArrowDown(_ref6) {\n        var editor = _ref6.editor;\n        if (!_this3.options.exitOnArrowDown) {\n          return false;\n        }\n        var state = editor.state;\n        var selection = state.selection,\n          doc = state.doc;\n        var $from = selection.$from,\n          empty = selection.empty;\n        if (!empty || $from.parent.type !== _this3.type) {\n          return false;\n        }\n        var isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n        if (!isAtEnd) {\n          return false;\n        }\n        var after = $from.after();\n        if (after === undefined) {\n          return false;\n        }\n        var nodeAfter = doc.nodeAt(after);\n        if (nodeAfter) {\n          return false;\n        }\n        return editor.commands.exitCode();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [textblockTypeInputRule({\n      find: backtickInputRegex,\n      type: this.type,\n      getAttributes: function getAttributes(match) {\n        return {\n          language: match[1]\n        };\n      }\n    }), textblockTypeInputRule({\n      find: tildeInputRegex,\n      type: this.type,\n      getAttributes: function getAttributes(match) {\n        return {\n          language: match[1]\n        };\n      }\n    })];\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this4 = this;\n    return [\n    // this plugin creates a code block for pasted content from VS Code\n    // we can also detect the copied code language\n    new Plugin({\n      key: new PluginKey('codeBlockVSCodeHandler'),\n      props: {\n        handlePaste: function handlePaste(view, event) {\n          if (!event.clipboardData) {\n            return false;\n          }\n          // donâ€™t create a new code block within code blocks\n          if (_this4.editor.isActive(_this4.type.name)) {\n            return false;\n          }\n          var text = event.clipboardData.getData('text/plain');\n          var vscode = event.clipboardData.getData('vscode-editor-data');\n          var vscodeData = vscode ? JSON.parse(vscode) : undefined;\n          var language = vscodeData === null || vscodeData === void 0 ? void 0 : vscodeData.mode;\n          if (!text || !language) {\n            return false;\n          }\n          var tr = view.state.tr;\n          // create an empty code block\n          tr.replaceSelectionWith(_this4.type.create({\n            language: language\n          }));\n          // put cursor inside the newly created code block\n          tr.setSelection(TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))));\n          // add text to code block\n          // strip carriage return chars from text pasted as code\n          // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\n          tr.insertText(text.replace(/\\r\\n?/g, '\\n'));\n          // store meta information\n          // this is useful for other plugins that depends on the paste event\n          // like the paste rule plugin\n          tr.setMeta('paste', true);\n          view.dispatch(tr);\n          return true;\n        }\n      }\n    })];\n  }\n});\nexport { CodeBlock, backtickInputRegex, CodeBlock as default, tildeInputRegex };","map":{"version":3,"mappings":"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","names":["backtickInputRegex","tildeInputRegex","Node","create","name","addOptions","languageClassPrefix","exitOnTripleEnter","exitOnArrowDown","HTMLAttributes","content","marks","group","code","defining","addAttributes","language","default","parseHTML","options","classNames","firstElementChild","classList","languages","filter","className","startsWith","map","replace","rendered","tag","preserveWhitespace","renderHTML","node","mergeAttributes","class","attrs","addCommands","setCodeBlock","commands","setNode","attributes","toggleCodeBlock","toggleNode","addKeyboardShortcuts","editor","Backspace","state","selection","empty","$anchor","isAtStart","pos","parent","type","textContent","length","clearNodes","Enter","$from","isAtEnd","parentOffset","nodeSize","endsWithDoubleNewline","endsWith","chain","command","tr","delete","exitCode","run","ArrowDown","doc","after","undefined","nodeAfter","nodeAt","addInputRules","textblockTypeInputRule","find","getAttributes","match","addProseMirrorPlugins","Plugin","key","PluginKey","props","handlePaste","view","event","clipboardData","isActive","text","getData","vscode","vscodeData","JSON","parse","mode","replaceSelectionWith","setSelection","TextSelection","near","resolve","Math","max","from","insertText","setMeta","dispatch"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-code-block\\src\\code-block.ts"],"sourcesContent":["import { mergeAttributes, Node, textblockTypeInputRule } from '@tiptap/core'\nimport { Plugin, PluginKey, TextSelection } from '@tiptap/pm/state'\n\nexport interface CodeBlockOptions {\n  /**\n   * Adds a prefix to language classes that are applied to code tags.\n   * Defaults to `'language-'`.\n   */\n  languageClassPrefix: string\n  /**\n   * Define whether the node should be exited on triple enter.\n   * Defaults to `true`.\n   */\n  exitOnTripleEnter: boolean\n  /**\n   * Define whether the node should be exited on arrow down if there is no node after it.\n   * Defaults to `true`.\n   */\n  exitOnArrowDown: boolean\n  /**\n   * Custom HTML attributes that should be added to the rendered HTML tag.\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    codeBlock: {\n      /**\n       * Set a code block\n       */\n      setCodeBlock: (attributes?: { language: string }) => ReturnType\n      /**\n       * Toggle a code block\n       */\n      toggleCodeBlock: (attributes?: { language: string }) => ReturnType\n    }\n  }\n}\n\nexport const backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/\nexport const tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/\n\nexport const CodeBlock = Node.create<CodeBlockOptions>({\n  name: 'codeBlock',\n\n  addOptions() {\n    return {\n      languageClassPrefix: 'language-',\n      exitOnTripleEnter: true,\n      exitOnArrowDown: true,\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'text*',\n\n  marks: '',\n\n  group: 'block',\n\n  code: true,\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      language: {\n        default: null,\n        parseHTML: element => {\n          const { languageClassPrefix } = this.options\n          const classNames = [...(element.firstElementChild?.classList || [])]\n          const languages = classNames\n            .filter(className => className.startsWith(languageClassPrefix))\n            .map(className => className.replace(languageClassPrefix, ''))\n          const language = languages[0]\n\n          if (!language) {\n            return null\n          }\n\n          return language\n        },\n        rendered: false,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'pre',\n        preserveWhitespace: 'full',\n      },\n    ]\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    return [\n      'pre',\n      mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),\n      [\n        'code',\n        {\n          class: node.attrs.language\n            ? this.options.languageClassPrefix + node.attrs.language\n            : null,\n        },\n        0,\n      ],\n    ]\n  },\n\n  addCommands() {\n    return {\n      setCodeBlock:\n        attributes => ({ commands }) => {\n          return commands.setNode(this.name, attributes)\n        },\n      toggleCodeBlock:\n        attributes => ({ commands }) => {\n          return commands.toggleNode(this.name, 'paragraph', attributes)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),\n\n      // remove code block when at start of document or code block is empty\n      Backspace: () => {\n        const { empty, $anchor } = this.editor.state.selection\n        const isAtStart = $anchor.pos === 1\n\n        if (!empty || $anchor.parent.type.name !== this.name) {\n          return false\n        }\n\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return this.editor.commands.clearNodes()\n        }\n\n        return false\n      },\n\n      // exit node on triple enter\n      Enter: ({ editor }) => {\n        if (!this.options.exitOnTripleEnter) {\n          return false\n        }\n\n        const { state } = editor\n        const { selection } = state\n        const { $from, empty } = selection\n\n        if (!empty || $from.parent.type !== this.type) {\n          return false\n        }\n\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2\n        const endsWithDoubleNewline = $from.parent.textContent.endsWith('\\n\\n')\n\n        if (!isAtEnd || !endsWithDoubleNewline) {\n          return false\n        }\n\n        return editor\n          .chain()\n          .command(({ tr }) => {\n            tr.delete($from.pos - 2, $from.pos)\n\n            return true\n          })\n          .exitCode()\n          .run()\n      },\n\n      // exit node on arrow down\n      ArrowDown: ({ editor }) => {\n        if (!this.options.exitOnArrowDown) {\n          return false\n        }\n\n        const { state } = editor\n        const { selection, doc } = state\n        const { $from, empty } = selection\n\n        if (!empty || $from.parent.type !== this.type) {\n          return false\n        }\n\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2\n\n        if (!isAtEnd) {\n          return false\n        }\n\n        const after = $from.after()\n\n        if (after === undefined) {\n          return false\n        }\n\n        const nodeAfter = doc.nodeAt(after)\n\n        if (nodeAfter) {\n          return false\n        }\n\n        return editor.commands.exitCode()\n      },\n    }\n  },\n\n  addInputRules() {\n    return [\n      textblockTypeInputRule({\n        find: backtickInputRegex,\n        type: this.type,\n        getAttributes: match => ({\n          language: match[1],\n        }),\n      }),\n      textblockTypeInputRule({\n        find: tildeInputRegex,\n        type: this.type,\n        getAttributes: match => ({\n          language: match[1],\n        }),\n      }),\n    ]\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      // this plugin creates a code block for pasted content from VS Code\n      // we can also detect the copied code language\n      new Plugin({\n        key: new PluginKey('codeBlockVSCodeHandler'),\n        props: {\n          handlePaste: (view, event) => {\n            if (!event.clipboardData) {\n              return false\n            }\n\n            // donâ€™t create a new code block within code blocks\n            if (this.editor.isActive(this.type.name)) {\n              return false\n            }\n\n            const text = event.clipboardData.getData('text/plain')\n            const vscode = event.clipboardData.getData('vscode-editor-data')\n            const vscodeData = vscode ? JSON.parse(vscode) : undefined\n            const language = vscodeData?.mode\n\n            if (!text || !language) {\n              return false\n            }\n\n            const { tr } = view.state\n\n            // create an empty code block\n            tr.replaceSelectionWith(this.type.create({ language }))\n\n            // put cursor inside the newly created code block\n            tr.setSelection(TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))))\n\n            // add text to code block\n            // strip carriage return chars from text pasted as code\n            // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\n            tr.insertText(text.replace(/\\r\\n?/g, '\\n'))\n\n            // store meta information\n            // this is useful for other plugins that depends on the paste event\n            // like the paste rule plugin\n            tr.setMeta('paste', true)\n\n            view.dispatch(tr)\n\n            return true\n          },\n        },\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}