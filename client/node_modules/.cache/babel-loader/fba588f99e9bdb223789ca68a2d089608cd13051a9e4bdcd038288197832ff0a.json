{"ast":null,"code":"import { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\nconst Heading = Node.create({\n  name: 'heading',\n  addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {}\n    };\n  },\n  content: 'inline*',\n  group: 'block',\n  defining: true,\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false\n      }\n    };\n  },\n  parseHTML() {\n    return this.options.levels.map(level => ({\n      tag: `h${level}`,\n      attrs: {\n        level\n      }\n    }));\n  },\n  renderHTML(_ref) {\n    let {\n      node,\n      HTMLAttributes\n    } = _ref;\n    const hasLevel = this.options.levels.includes(node.attrs.level);\n    const level = hasLevel ? node.attrs.level : this.options.levels[0];\n    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setHeading: attributes => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        if (!this.options.levels.includes(attributes.level)) {\n          return false;\n        }\n        return commands.setNode(this.name, attributes);\n      },\n      toggleHeading: attributes => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n        if (!this.options.levels.includes(attributes.level)) {\n          return false;\n        }\n        return commands.toggleNode(this.name, 'paragraph', attributes);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce((items, level) => ({\n      ...items,\n      ...{\n        [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({\n          level\n        })\n      }\n    }), {});\n  },\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule({\n        find: new RegExp(`^(#{1,${level}})\\\\s$`),\n        type: this.type,\n        getAttributes: {\n          level\n        }\n      });\n    });\n  }\n});\nexport { Heading, Heading as default };","map":{"version":3,"mappings":";AAwBa,aAAO,GAAGA,IAAI,CAACC,MAAM,CAAiB;EACjDC,IAAI,EAAE,SAAS;EAEfC,UAAU;IACR,OAAO;MACLC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC1BC,cAAc,EAAE;KACjB;GACF;EAEDC,OAAO,EAAE,SAAS;EAElBC,KAAK,EAAE,OAAO;EAEdC,QAAQ,EAAE,IAAI;EAEdC,aAAa;IACX,OAAO;MACLC,KAAK,EAAE;QACLC,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAE;MACX;KACF;GACF;EAEDC,SAAS;IACP,OAAO,IAAI,CAACC,OAAO,CAACV,MAAM,CACvBW,GAAG,CAAEL,KAAY,KAAM;MACtBM,GAAG,EAAM,SAAO;MAChBC,KAAK,EAAE;QAAEP;MAAK;IACf,EAAC,CAAC;GACN;EAEDQ,UAAU,OAAyB;IAAA,IAAxB;MAAEC,IAAI;MAAEd;IAAc,CAAE;IACjC,MAAMe,QAAQ,GAAG,IAAI,CAACN,OAAO,CAACV,MAAM,CAACiB,QAAQ,CAACF,IAAI,CAACF,KAAK,CAACP,KAAK,CAAC;IAC/D,MAAMA,KAAK,GAAGU,QAAQ,GAClBD,IAAI,CAACF,KAAK,CAACP,KAAK,GAChB,IAAI,CAACI,OAAO,CAACV,MAAM,CAAC,CAAC,CAAC;IAE1B,OAAO,CAAK,SAAK,EAAE,EAAEkB,eAAe,CAAC,IAAI,CAACR,OAAO,CAACT,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GACtF;EAEDkB,WAAW;IACT,OAAO;MACLC,UAAU,EAAEC,UAAU,IAAI,SAAiB;QAAA,IAAhB;UAAEC;QAAQ,CAAE;QACrC,IAAI,CAAC,IAAI,CAACZ,OAAO,CAACV,MAAM,CAACiB,QAAQ,CAACI,UAAU,CAACf,KAAK,CAAC,EAAE;UACnD,OAAO,KAAK;QACb;QAED,OAAOgB,QAAQ,CAACC,OAAO,CAAC,IAAI,CAACzB,IAAI,EAAEuB,UAAU,CAAC;OAC/C;MACDG,aAAa,EAAEH,UAAU,IAAI,SAAiB;QAAA,IAAhB;UAAEC;QAAQ,CAAE;QACxC,IAAI,CAAC,IAAI,CAACZ,OAAO,CAACV,MAAM,CAACiB,QAAQ,CAACI,UAAU,CAACf,KAAK,CAAC,EAAE;UACnD,OAAO,KAAK;QACb;QAED,OAAOgB,QAAQ,CAACG,UAAU,CAAC,IAAI,CAAC3B,IAAI,EAAE,WAAW,EAAEuB,UAAU,CAAC;;KAEjE;GACF;EAEDK,oBAAoB;IAClB,OAAO,IAAI,CAAChB,OAAO,CAACV,MAAM,CAAC2B,MAAM,CAAC,CAACC,KAAK,EAAEtB,KAAK,MAAM;MACnD,GAAGsB,KAAK;MACR,GAAG;QACD,CAAC,WAAWtB,KAAK,EAAE,GAAG,MAAM,IAAI,CAACuB,MAAM,CAACP,QAAQ,CAACE,aAAa,CAAC;UAAElB;QAAK,CAAE;MACzE;KACF,CAAC,EAAE,EAAE,CAAC;GACR;EAEDwB,aAAa;IACX,OAAO,IAAI,CAACpB,OAAO,CAACV,MAAM,CAACW,GAAG,CAACL,KAAK,IAAG;MACrC,OAAOyB,sBAAsB,CAAC;QAC5BC,IAAI,EAAE,IAAIC,MAAM,CAAU,cAAK,QAAQ,CAAC;QACxCC,IAAI,EAAE,IAAI,CAACA,IAAI;QACfC,aAAa,EAAE;UACb7B;QACD;MACF,EAAC;IACJ,CAAC,CAAC;;AAEL","names":["Node","create","name","addOptions","levels","HTMLAttributes","content","group","defining","addAttributes","level","default","rendered","parseHTML","options","map","tag","attrs","renderHTML","node","hasLevel","includes","mergeAttributes","addCommands","setHeading","attributes","commands","setNode","toggleHeading","toggleNode","addKeyboardShortcuts","reduce","items","editor","addInputRules","textblockTypeInputRule","find","RegExp","type","getAttributes"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-heading\\src\\heading.ts"],"sourcesContent":["import { mergeAttributes, Node, textblockTypeInputRule } from '@tiptap/core'\n\nexport type Level = 1 | 2 | 3 | 4 | 5 | 6\n\nexport interface HeadingOptions {\n  levels: Level[],\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    heading: {\n      /**\n       * Set a heading node\n       */\n      setHeading: (attributes: { level: Level }) => ReturnType,\n      /**\n       * Toggle a heading node\n       */\n      toggleHeading: (attributes: { level: Level }) => ReturnType,\n    }\n  }\n}\n\nexport const Heading = Node.create<HeadingOptions>({\n  name: 'heading',\n\n  addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'inline*',\n\n  group: 'block',\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false,\n      },\n    }\n  },\n\n  parseHTML() {\n    return this.options.levels\n      .map((level: Level) => ({\n        tag: `h${level}`,\n        attrs: { level },\n      }))\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    const hasLevel = this.options.levels.includes(node.attrs.level)\n    const level = hasLevel\n      ? node.attrs.level\n      : this.options.levels[0]\n\n    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHeading: attributes => ({ commands }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false\n        }\n\n        return commands.setNode(this.name, attributes)\n      },\n      toggleHeading: attributes => ({ commands }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false\n        }\n\n        return commands.toggleNode(this.name, 'paragraph', attributes)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce((items, level) => ({\n      ...items,\n      ...{\n        [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level }),\n      },\n    }), {})\n  },\n\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule({\n        find: new RegExp(`^(#{1,${level}})\\\\s$`),\n        type: this.type,\n        getAttributes: {\n          level,\n        },\n      })\n    })\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}