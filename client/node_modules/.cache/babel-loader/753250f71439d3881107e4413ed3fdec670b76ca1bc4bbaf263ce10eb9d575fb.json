{"ast":null,"code":"/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n'use strict';\n\nvar link = require('@lexical/link');\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar utils = require('@lexical/utils');\nvar lexical = require('lexical');\nvar react = require('react');\n\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\nfunction LinkPlugin(_ref) {\n  let {\n    validateUrl\n  } = _ref;\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    if (!editor.hasNodes([link.LinkNode])) {\n      throw new Error('LinkPlugin: LinkNode not registered on editor');\n    }\n    return utils.mergeRegister(editor.registerCommand(link.TOGGLE_LINK_COMMAND, payload => {\n      if (payload === null) {\n        link.toggleLink(payload);\n        return true;\n      } else if (typeof payload === 'string') {\n        if (validateUrl === undefined || validateUrl(payload)) {\n          link.toggleLink(payload);\n          return true;\n        }\n        return false;\n      } else {\n        const {\n          url,\n          target,\n          rel\n        } = payload;\n        link.toggleLink(url, {\n          rel,\n          target\n        });\n        return true;\n      }\n    }, lexical.COMMAND_PRIORITY_LOW), validateUrl !== undefined ? editor.registerCommand(lexical.PASTE_COMMAND, event => {\n      const selection = lexical.$getSelection();\n      if (!lexical.$isRangeSelection(selection) || selection.isCollapsed() || !(event instanceof ClipboardEvent) || event.clipboardData == null) {\n        return false;\n      }\n      const clipboardText = event.clipboardData.getData('text');\n      if (!validateUrl(clipboardText)) {\n        return false;\n      }\n      // If we select nodes that are elements then avoid applying the link.\n      if (!selection.getNodes().some(node => lexical.$isElementNode(node))) {\n        editor.dispatchCommand(link.TOGGLE_LINK_COMMAND, clipboardText);\n        event.preventDefault();\n        return true;\n      }\n      return false;\n    }, lexical.COMMAND_PRIORITY_LOW) : () => {\n      // Don't paste arbritrary text as a link when there's no validate function\n    });\n  }, [editor, validateUrl]);\n  return null;\n}\nexports.LinkPlugin = LinkPlugin;","map":{"version":3,"names":["link","require","LexicalComposerContext","utils","lexical","react","LinkPlugin","validateUrl","editor","useLexicalComposerContext","useEffect","hasNodes","LinkNode","Error","mergeRegister","registerCommand","TOGGLE_LINK_COMMAND","payload","toggleLink","undefined","url","target","rel","COMMAND_PRIORITY_LOW","PASTE_COMMAND","event","selection","$getSelection","$isRangeSelection","isCollapsed","ClipboardEvent","clipboardData","clipboardText","getData","getNodes","some","node","$isElementNode","dispatchCommand","preventDefault","exports"],"sources":["C:/Users/petew/OneDrive/Desktop/Web Dev Reboot/react-boat-info/client/node_modules/@lexical/react/LexicalLinkPlugin.dev.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict';\r\n\r\nvar link = require('@lexical/link');\r\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\r\nvar utils = require('@lexical/utils');\r\nvar lexical = require('lexical');\r\nvar react = require('react');\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nfunction LinkPlugin({\r\n  validateUrl\r\n}) {\r\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\r\n  react.useEffect(() => {\r\n    if (!editor.hasNodes([link.LinkNode])) {\r\n      throw new Error('LinkPlugin: LinkNode not registered on editor');\r\n    }\r\n    return utils.mergeRegister(editor.registerCommand(link.TOGGLE_LINK_COMMAND, payload => {\r\n      if (payload === null) {\r\n        link.toggleLink(payload);\r\n        return true;\r\n      } else if (typeof payload === 'string') {\r\n        if (validateUrl === undefined || validateUrl(payload)) {\r\n          link.toggleLink(payload);\r\n          return true;\r\n        }\r\n        return false;\r\n      } else {\r\n        const {\r\n          url,\r\n          target,\r\n          rel\r\n        } = payload;\r\n        link.toggleLink(url, {\r\n          rel,\r\n          target\r\n        });\r\n        return true;\r\n      }\r\n    }, lexical.COMMAND_PRIORITY_LOW), validateUrl !== undefined ? editor.registerCommand(lexical.PASTE_COMMAND, event => {\r\n      const selection = lexical.$getSelection();\r\n      if (!lexical.$isRangeSelection(selection) || selection.isCollapsed() || !(event instanceof ClipboardEvent) || event.clipboardData == null) {\r\n        return false;\r\n      }\r\n      const clipboardText = event.clipboardData.getData('text');\r\n      if (!validateUrl(clipboardText)) {\r\n        return false;\r\n      }\r\n      // If we select nodes that are elements then avoid applying the link.\r\n      if (!selection.getNodes().some(node => lexical.$isElementNode(node))) {\r\n        editor.dispatchCommand(link.TOGGLE_LINK_COMMAND, clipboardText);\r\n        event.preventDefault();\r\n        return true;\r\n      }\r\n      return false;\r\n    }, lexical.COMMAND_PRIORITY_LOW) : () => {\r\n      // Don't paste arbritrary text as a link when there's no validate function\r\n    });\r\n  }, [editor, validateUrl]);\r\n  return null;\r\n}\r\n\r\nexports.LinkPlugin = LinkPlugin;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAe,CAAC;AACnC,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,uCAAuC,CAAC;AAC7E,IAAIE,KAAK,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AACrC,IAAIG,OAAO,GAAGH,OAAO,CAAC,SAAS,CAAC;AAChC,IAAII,KAAK,GAAGJ,OAAO,CAAC,OAAO,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,UAAU,OAEhB;EAAA,IAFiB;IAClBC;EACF,CAAC;EACC,MAAM,CAACC,MAAM,CAAC,GAAGN,sBAAsB,CAACO,yBAAyB,EAAE;EACnEJ,KAAK,CAACK,SAAS,CAAC,MAAM;IACpB,IAAI,CAACF,MAAM,CAACG,QAAQ,CAAC,CAACX,IAAI,CAACY,QAAQ,CAAC,CAAC,EAAE;MACrC,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;IAClE;IACA,OAAOV,KAAK,CAACW,aAAa,CAACN,MAAM,CAACO,eAAe,CAACf,IAAI,CAACgB,mBAAmB,EAAEC,OAAO,IAAI;MACrF,IAAIA,OAAO,KAAK,IAAI,EAAE;QACpBjB,IAAI,CAACkB,UAAU,CAACD,OAAO,CAAC;QACxB,OAAO,IAAI;MACb,CAAC,MAAM,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;QACtC,IAAIV,WAAW,KAAKY,SAAS,IAAIZ,WAAW,CAACU,OAAO,CAAC,EAAE;UACrDjB,IAAI,CAACkB,UAAU,CAACD,OAAO,CAAC;UACxB,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd,CAAC,MAAM;QACL,MAAM;UACJG,GAAG;UACHC,MAAM;UACNC;QACF,CAAC,GAAGL,OAAO;QACXjB,IAAI,CAACkB,UAAU,CAACE,GAAG,EAAE;UACnBE,GAAG;UACHD;QACF,CAAC,CAAC;QACF,OAAO,IAAI;MACb;IACF,CAAC,EAAEjB,OAAO,CAACmB,oBAAoB,CAAC,EAAEhB,WAAW,KAAKY,SAAS,GAAGX,MAAM,CAACO,eAAe,CAACX,OAAO,CAACoB,aAAa,EAAEC,KAAK,IAAI;MACnH,MAAMC,SAAS,GAAGtB,OAAO,CAACuB,aAAa,EAAE;MACzC,IAAI,CAACvB,OAAO,CAACwB,iBAAiB,CAACF,SAAS,CAAC,IAAIA,SAAS,CAACG,WAAW,EAAE,IAAI,EAAEJ,KAAK,YAAYK,cAAc,CAAC,IAAIL,KAAK,CAACM,aAAa,IAAI,IAAI,EAAE;QACzI,OAAO,KAAK;MACd;MACA,MAAMC,aAAa,GAAGP,KAAK,CAACM,aAAa,CAACE,OAAO,CAAC,MAAM,CAAC;MACzD,IAAI,CAAC1B,WAAW,CAACyB,aAAa,CAAC,EAAE;QAC/B,OAAO,KAAK;MACd;MACA;MACA,IAAI,CAACN,SAAS,CAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,IAAI,IAAIhC,OAAO,CAACiC,cAAc,CAACD,IAAI,CAAC,CAAC,EAAE;QACpE5B,MAAM,CAAC8B,eAAe,CAACtC,IAAI,CAACgB,mBAAmB,EAAEgB,aAAa,CAAC;QAC/DP,KAAK,CAACc,cAAc,EAAE;QACtB,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC,EAAEnC,OAAO,CAACmB,oBAAoB,CAAC,GAAG,MAAM;MACvC;IAAA,CACD,CAAC;EACJ,CAAC,EAAE,CAACf,MAAM,EAAED,WAAW,CAAC,CAAC;EACzB,OAAO,IAAI;AACb;AAEAiC,OAAO,CAAClC,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}