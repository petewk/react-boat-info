{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nvar inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/;\nvar pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/g;\nvar Strike = Mark.create({\n  name: 'strike',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 's'\n    }, {\n      tag: 'del'\n    }, {\n      tag: 'strike'\n    }, {\n      style: 'text-decoration',\n      consuming: false,\n      getAttrs: function getAttrs(style) {\n        return style.includes('line-through') ? {} : false;\n      }\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setStrike: function setStrike() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark(_this.name);\n        };\n      },\n      toggleStrike: function toggleStrike() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark(_this.name);\n        };\n      },\n      unsetStrike: function unsetStrike() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark(_this.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Shift-x': function ModShiftX() {\n        return _this2.editor.commands.toggleStrike();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [markInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules: function addPasteRules() {\n    return [markPasteRule({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Strike, Strike as default, inputRegex, pasteRegex };","map":{"version":3,"mappings":";AA8BO,IAAMA,UAAU,GAAG;AACnB,IAAMC,UAAU,GAAG;AAEb,UAAM,GAAGC,IAAI,CAACC,MAAM,CAAgB;EAC/CC,IAAI,EAAE,QAAQ;EAEdC,UAAU;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,SAAS;IACP,OAAO,CACL;MACEC,GAAG,EAAE;IACN,GACD;MACEA,GAAG,EAAE;IACN,GACD;MACEA,GAAG,EAAE;IACN,GACD;MACEC,KAAK,EAAE,iBAAiB;MACxBC,SAAS,EAAE,KAAK;MAChBC,QAAQ,EAAE,uBAAK;QAAA,OAAMF,KAAgB,CAACG,QAAQ,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,KAAK;MAAA;IAC5E,EACF;GACF;EAEDC,UAAU,4BAAmB;IAAA,IAAhBP,cAAc,QAAdA,cAAc;IACzB,OAAO,CAAC,GAAG,EAAEQ,eAAe,CAAC,IAAI,CAACC,OAAO,CAACT,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GAC9E;EAEDU,WAAW;IAAA;IACT,OAAO;MACLC,SAAS,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAdC,QAAQ,SAARA,QAAQ;UAC1B,OAAOA,QAAQ,CAACC,OAAO,CAAC,KAAI,CAACf,IAAI,CAAC;SACnC;MAAA;MACDgB,YAAY,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAdF,QAAQ,SAARA,QAAQ;UAC7B,OAAOA,QAAQ,CAACG,UAAU,CAAC,KAAI,CAACjB,IAAI,CAAC;SACtC;MAAA;MACDkB,WAAW,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAdJ,QAAQ,SAARA,QAAQ;UAC5B,OAAOA,QAAQ,CAACK,SAAS,CAAC,KAAI,CAACnB,IAAI,CAAC;SACrC;MAAA;KACF;GACF;EAEDoB,oBAAoB;IAAA;IAClB,OAAO;MACL,aAAa,EAAE;QAAA,OAAM,MAAI,CAACC,MAAM,CAACP,QAAQ,CAACE,YAAY,EAAE;MAAA;KACzD;GACF;EAEDM,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAE5B,UAAU;MAChB6B,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;GACF;EAEDC,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZH,IAAI,EAAE3B,UAAU;MAChB4B,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;;AAEJ","names":["inputRegex","pasteRegex","Mark","create","name","addOptions","HTMLAttributes","parseHTML","tag","style","consuming","getAttrs","includes","renderHTML","mergeAttributes","options","addCommands","setStrike","commands","setMark","toggleStrike","toggleMark","unsetStrike","unsetMark","addKeyboardShortcuts","editor","addInputRules","markInputRule","find","type","addPasteRules","markPasteRule"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-strike\\src\\strike.ts"],"sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface StrikeOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    strike: {\n      /**\n       * Set a strike mark\n       */\n      setStrike: () => ReturnType,\n      /**\n       * Toggle a strike mark\n       */\n      toggleStrike: () => ReturnType,\n      /**\n       * Unset a strike mark\n       */\n      unsetStrike: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/\nexport const pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/g\n\nexport const Strike = Mark.create<StrikeOptions>({\n  name: 'strike',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 's',\n      },\n      {\n        tag: 'del',\n      },\n      {\n        tag: 'strike',\n      },\n      {\n        style: 'text-decoration',\n        consuming: false,\n        getAttrs: style => ((style as string).includes('line-through') ? {} : false),\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setStrike: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleStrike: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetStrike: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-x': () => this.editor.commands.toggleStrike(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}