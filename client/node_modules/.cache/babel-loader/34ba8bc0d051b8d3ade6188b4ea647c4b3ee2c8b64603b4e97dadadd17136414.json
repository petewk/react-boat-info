{"ast":null,"code":"import { Node, mergeAttributes } from '@tiptap/core';\nconst Paragraph = Node.create({\n  name: 'paragraph',\n  priority: 1000,\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  group: 'block',\n  content: 'inline*',\n  parseHTML() {\n    return [{\n      tag: 'p'\n    }];\n  },\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setParagraph: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.setNode(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-0': () => this.editor.commands.setParagraph()\n    };\n  }\n});\nexport { Paragraph, Paragraph as default };","map":{"version":3,"mappings":";AAiBa,eAAS,GAAGA,IAAI,CAACC,MAAM,CAAmB;EACrDC,IAAI,EAAE,WAAW;EAEjBC,QAAQ,EAAE,IAAI;EAEdC,UAAU;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,KAAK,EAAE,OAAO;EAEdC,OAAO,EAAE,SAAS;EAElBC,SAAS;IACP,OAAO,CACL;MAAEC,GAAG,EAAE;IAAG,CAAE,CACb;GACF;EAEDC,UAAU,OAAmB;IAAA,IAAlB;MAAEL;IAAc,CAAE;IAC3B,OAAO,CAAC,GAAG,EAAEM,eAAe,CAAC,IAAI,CAACC,OAAO,CAACP,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GAC9E;EAEDQ,WAAW;IACT,OAAO;MACLC,YAAY,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEC;QAAQ,CAAE;QAC/B,OAAOA,QAAQ,CAACC,OAAO,CAAC,IAAI,CAACd,IAAI,CAAC;;KAErC;GACF;EAEDe,oBAAoB;IAClB,OAAO;MACL,WAAW,EAAE,MAAM,IAAI,CAACC,MAAM,CAACH,QAAQ,CAACD,YAAY;KACrD;;AAEJ","names":["Node","create","name","priority","addOptions","HTMLAttributes","group","content","parseHTML","tag","renderHTML","mergeAttributes","options","addCommands","setParagraph","commands","setNode","addKeyboardShortcuts","editor"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-paragraph\\src\\paragraph.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ParagraphOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    paragraph: {\n      /**\n       * Toggle a paragraph\n       */\n      setParagraph: () => ReturnType,\n    }\n  }\n}\n\nexport const Paragraph = Node.create<ParagraphOptions>({\n  name: 'paragraph',\n\n  priority: 1000,\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block',\n\n  content: 'inline*',\n\n  parseHTML() {\n    return [\n      { tag: 'p' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setParagraph: () => ({ commands }) => {\n        return commands.setNode(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-0': () => this.editor.commands.setParagraph(),\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}