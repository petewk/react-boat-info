{"ast":null,"code":"import { EditorState, SelectionState } from 'draft-js';\nimport getSelectedBlocks from './getSelectedBlocks';\n/**\n * Calls a provided `modifier` function with a selection for each\n * selected block in the current editor selection. Passes through additional\n * arguments to the modifier.\n *\n * Note: At the moment it will retain the original selection and override\n * possible selection changes from modifiers\n *\n * @param  {object} editorState The current draft.js editor state object\n *\n * @param  {function} modifier  A modifier function to be executed.\n *                              Must have the signature (editorState, selection, ...)\n *\n * @param  {mixed} ...args      Additional arguments to be passed through to the modifier\n *\n * @return {object} The new editor state\n */\n\nexport default (function (editorState, modifier) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n  var contentState = editorState.getCurrentContent();\n  var currentSelection = editorState.getSelection();\n  var startKey = currentSelection.getStartKey();\n  var endKey = currentSelection.getEndKey();\n  var startOffset = currentSelection.getStartOffset();\n  var endOffset = currentSelection.getEndOffset();\n  var isSameBlock = startKey === endKey;\n  var selectedBlocks = getSelectedBlocks(contentState, startKey, endKey);\n  var finalEditorState = editorState;\n  selectedBlocks.forEach(function (block) {\n    var currentBlockKey = block.getKey();\n    var selectionStart = startOffset;\n    var selectionEnd = endOffset;\n    if (currentBlockKey === startKey) {\n      selectionStart = startOffset;\n      selectionEnd = isSameBlock ? endOffset : block.getText().length;\n    } else if (currentBlockKey === endKey) {\n      selectionStart = isSameBlock ? startOffset : 0;\n      selectionEnd = endOffset;\n    } else {\n      selectionStart = 0;\n      selectionEnd = block.getText().length;\n    }\n    var selection = new SelectionState({\n      anchorKey: currentBlockKey,\n      anchorOffset: selectionStart,\n      focusKey: currentBlockKey,\n      focusOffset: selectionEnd\n    });\n    finalEditorState = modifier.apply(void 0, [finalEditorState, selection].concat(args));\n  });\n  return EditorState.forceSelection(finalEditorState, currentSelection);\n});","map":{"version":3,"names":["EditorState","SelectionState","getSelectedBlocks","editorState","modifier","_len","arguments","length","args","Array","_key","contentState","getCurrentContent","currentSelection","getSelection","startKey","getStartKey","endKey","getEndKey","startOffset","getStartOffset","endOffset","getEndOffset","isSameBlock","selectedBlocks","finalEditorState","forEach","block","currentBlockKey","getKey","selectionStart","selectionEnd","getText","selection","anchorKey","anchorOffset","focusKey","focusOffset","apply","concat","forceSelection"],"sources":["C:/Users/petew/OneDrive/Desktop/Web Dev Reboot/react-boat-info/client/node_modules/draft-js-utils/esm/callModifierForSelectedBlocks.js"],"sourcesContent":["import { EditorState, SelectionState } from 'draft-js';\nimport getSelectedBlocks from './getSelectedBlocks';\n/**\n * Calls a provided `modifier` function with a selection for each\n * selected block in the current editor selection. Passes through additional\n * arguments to the modifier.\n *\n * Note: At the moment it will retain the original selection and override\n * possible selection changes from modifiers\n *\n * @param  {object} editorState The current draft.js editor state object\n *\n * @param  {function} modifier  A modifier function to be executed.\n *                              Must have the signature (editorState, selection, ...)\n *\n * @param  {mixed} ...args      Additional arguments to be passed through to the modifier\n *\n * @return {object} The new editor state\n */\n\nexport default (function (editorState, modifier) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  var contentState = editorState.getCurrentContent();\n  var currentSelection = editorState.getSelection();\n  var startKey = currentSelection.getStartKey();\n  var endKey = currentSelection.getEndKey();\n  var startOffset = currentSelection.getStartOffset();\n  var endOffset = currentSelection.getEndOffset();\n  var isSameBlock = startKey === endKey;\n  var selectedBlocks = getSelectedBlocks(contentState, startKey, endKey);\n  var finalEditorState = editorState;\n  selectedBlocks.forEach(function (block) {\n    var currentBlockKey = block.getKey();\n    var selectionStart = startOffset;\n    var selectionEnd = endOffset;\n\n    if (currentBlockKey === startKey) {\n      selectionStart = startOffset;\n      selectionEnd = isSameBlock ? endOffset : block.getText().length;\n    } else if (currentBlockKey === endKey) {\n      selectionStart = isSameBlock ? startOffset : 0;\n      selectionEnd = endOffset;\n    } else {\n      selectionStart = 0;\n      selectionEnd = block.getText().length;\n    }\n\n    var selection = new SelectionState({\n      anchorKey: currentBlockKey,\n      anchorOffset: selectionStart,\n      focusKey: currentBlockKey,\n      focusOffset: selectionEnd\n    });\n    finalEditorState = modifier.apply(void 0, [finalEditorState, selection].concat(args));\n  });\n  return EditorState.forceSelection(finalEditorState, currentSelection);\n});"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,UAAU;AACtD,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,UAAUC,WAAW,EAAEC,QAAQ,EAAE;EAC/C,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;IAC1GF,IAAI,CAACE,IAAI,GAAG,CAAC,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;EAClC;EAEA,IAAIC,YAAY,GAAGR,WAAW,CAACS,iBAAiB,EAAE;EAClD,IAAIC,gBAAgB,GAAGV,WAAW,CAACW,YAAY,EAAE;EACjD,IAAIC,QAAQ,GAAGF,gBAAgB,CAACG,WAAW,EAAE;EAC7C,IAAIC,MAAM,GAAGJ,gBAAgB,CAACK,SAAS,EAAE;EACzC,IAAIC,WAAW,GAAGN,gBAAgB,CAACO,cAAc,EAAE;EACnD,IAAIC,SAAS,GAAGR,gBAAgB,CAACS,YAAY,EAAE;EAC/C,IAAIC,WAAW,GAAGR,QAAQ,KAAKE,MAAM;EACrC,IAAIO,cAAc,GAAGtB,iBAAiB,CAACS,YAAY,EAAEI,QAAQ,EAAEE,MAAM,CAAC;EACtE,IAAIQ,gBAAgB,GAAGtB,WAAW;EAClCqB,cAAc,CAACE,OAAO,CAAC,UAAUC,KAAK,EAAE;IACtC,IAAIC,eAAe,GAAGD,KAAK,CAACE,MAAM,EAAE;IACpC,IAAIC,cAAc,GAAGX,WAAW;IAChC,IAAIY,YAAY,GAAGV,SAAS;IAE5B,IAAIO,eAAe,KAAKb,QAAQ,EAAE;MAChCe,cAAc,GAAGX,WAAW;MAC5BY,YAAY,GAAGR,WAAW,GAAGF,SAAS,GAAGM,KAAK,CAACK,OAAO,EAAE,CAACzB,MAAM;IACjE,CAAC,MAAM,IAAIqB,eAAe,KAAKX,MAAM,EAAE;MACrCa,cAAc,GAAGP,WAAW,GAAGJ,WAAW,GAAG,CAAC;MAC9CY,YAAY,GAAGV,SAAS;IAC1B,CAAC,MAAM;MACLS,cAAc,GAAG,CAAC;MAClBC,YAAY,GAAGJ,KAAK,CAACK,OAAO,EAAE,CAACzB,MAAM;IACvC;IAEA,IAAI0B,SAAS,GAAG,IAAIhC,cAAc,CAAC;MACjCiC,SAAS,EAAEN,eAAe;MAC1BO,YAAY,EAAEL,cAAc;MAC5BM,QAAQ,EAAER,eAAe;MACzBS,WAAW,EAAEN;IACf,CAAC,CAAC;IACFN,gBAAgB,GAAGrB,QAAQ,CAACkC,KAAK,CAAC,KAAK,CAAC,EAAE,CAACb,gBAAgB,EAAEQ,SAAS,CAAC,CAACM,MAAM,CAAC/B,IAAI,CAAC,CAAC;EACvF,CAAC,CAAC;EACF,OAAOR,WAAW,CAACwC,cAAc,CAACf,gBAAgB,EAAEZ,gBAAgB,CAAC;AACvE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}