{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nvar starInputRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))$/;\nvar starPasteRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))/g;\nvar underscoreInputRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))$/;\nvar underscorePasteRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))/g;\nvar Bold = Mark.create({\n  name: 'bold',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'strong'\n    }, {\n      tag: 'b',\n      getAttrs: function getAttrs(node) {\n        return node.style.fontWeight !== 'normal' && null;\n      }\n    }, {\n      style: 'font-weight',\n      getAttrs: function getAttrs(value) {\n        return /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null;\n      }\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['strong', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setBold: function setBold() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark(_this.name);\n        };\n      },\n      toggleBold: function toggleBold() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark(_this.name);\n        };\n      },\n      unsetBold: function unsetBold() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark(_this.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-b': function ModB() {\n        return _this2.editor.commands.toggleBold();\n      },\n      'Mod-B': function ModB() {\n        return _this2.editor.commands.toggleBold();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [markInputRule({\n      find: starInputRegex,\n      type: this.type\n    }), markInputRule({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules: function addPasteRules() {\n    return [markPasteRule({\n      find: starPasteRegex,\n      type: this.type\n    }), markPasteRule({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Bold, Bold as default, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };","map":{"version":3,"mappings":";AA8BO,IAAMA,cAAc,GAAG;AACvB,IAAMC,cAAc,GAAG;AACvB,IAAMC,oBAAoB,GAAG;AAC7B,IAAMC,oBAAoB,GAAG;AAEvB,QAAI,GAAGC,IAAI,CAACC,MAAM,CAAc;EAC3CC,IAAI,EAAE,MAAM;EAEZC,UAAU;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,SAAS;IACP,OAAO,CACL;MACEC,GAAG,EAAE;IACN,GACD;MACEA,GAAG,EAAE,GAAG;MACRC,QAAQ,EAAE,sBAAI;QAAA,OAAKC,IAAoB,CAACC,KAAK,CAACC,UAAU,KAAK,QAAQ,IAAI,IAAI;MAAA;IAC9E,GACD;MACED,KAAK,EAAE,aAAa;MACpBF,QAAQ,EAAE,uBAAK;QAAA,OAAI,2BAA2B,CAACI,IAAI,CAACC,KAAe,CAAC,IAAI,IAAI;MAAA;IAC7E,EACF;GACF;EAEDC,UAAU,4BAAmB;IAAA,IAAhBT,cAAc,QAAdA,cAAc;IACzB,OAAO,CAAC,QAAQ,EAAEU,eAAe,CAAC,IAAI,CAACC,OAAO,CAACX,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GACnF;EAEDY,WAAW;IAAA;IACT,OAAO;MACLC,OAAO,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAdC,QAAQ,SAARA,QAAQ;UACxB,OAAOA,QAAQ,CAACC,OAAO,CAAC,KAAI,CAACjB,IAAI,CAAC;SACnC;MAAA;MACDkB,UAAU,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAdF,QAAQ,SAARA,QAAQ;UAC3B,OAAOA,QAAQ,CAACG,UAAU,CAAC,KAAI,CAACnB,IAAI,CAAC;SACtC;MAAA;MACDoB,SAAS,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAdJ,QAAQ,SAARA,QAAQ;UAC1B,OAAOA,QAAQ,CAACK,SAAS,CAAC,KAAI,CAACrB,IAAI,CAAC;SACrC;MAAA;KACF;GACF;EAEDsB,oBAAoB;IAAA;IAClB,OAAO;MACL,OAAO,EAAE;QAAA,OAAM,MAAI,CAACC,MAAM,CAACP,QAAQ,CAACE,UAAU,EAAE;MAAA;MAChD,OAAO,EAAE;QAAA,OAAM,MAAI,CAACK,MAAM,CAACP,QAAQ,CAACE,UAAU,EAAE;MAAA;KACjD;GACF;EAEDM,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAEhC,cAAc;MACpBiC,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,EACFF,aAAa,CAAC;MACZC,IAAI,EAAE9B,oBAAoB;MAC1B+B,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;GACF;EAEDC,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZH,IAAI,EAAE/B,cAAc;MACpBgC,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,EACFE,aAAa,CAAC;MACZH,IAAI,EAAE7B,oBAAoB;MAC1B8B,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;;AAEJ","names":["starInputRegex","starPasteRegex","underscoreInputRegex","underscorePasteRegex","Mark","create","name","addOptions","HTMLAttributes","parseHTML","tag","getAttrs","node","style","fontWeight","test","value","renderHTML","mergeAttributes","options","addCommands","setBold","commands","setMark","toggleBold","toggleMark","unsetBold","unsetMark","addKeyboardShortcuts","editor","addInputRules","markInputRule","find","type","addPasteRules","markPasteRule"],"sources":["C:\\Users\\petew\\OneDrive\\Desktop\\Web Dev Reboot\\react-boat-info\\client\\node_modules\\@tiptap\\extension-bold\\src\\bold.ts"],"sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface BoldOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bold: {\n      /**\n       * Set a bold mark\n       */\n      setBold: () => ReturnType,\n      /**\n       * Toggle a bold mark\n       */\n      toggleBold: () => ReturnType,\n      /**\n       * Unset a bold mark\n       */\n      unsetBold: () => ReturnType,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))$/\nexport const starPasteRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))/g\nexport const underscoreInputRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))$/\nexport const underscorePasteRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))/g\n\nexport const Bold = Mark.create<BoldOptions>({\n  name: 'bold',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'strong',\n      },\n      {\n        tag: 'b',\n        getAttrs: node => (node as HTMLElement).style.fontWeight !== 'normal' && null,\n      },\n      {\n        style: 'font-weight',\n        getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value as string) && null,\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['strong', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setBold: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleBold: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetBold: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-b': () => this.editor.commands.toggleBold(),\n      'Mod-B': () => this.editor.commands.toggleBold(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}